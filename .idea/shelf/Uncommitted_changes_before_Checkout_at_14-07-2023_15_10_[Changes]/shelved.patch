Index: app/src/main/java/com/whitecoats/clinicplus/fragments/TransactionsFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.whitecoats.clinicplus.fragments;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Activity;\r\nimport android.app.ProgressDialog;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.os.Bundle;\r\nimport android.text.Editable;\r\nimport android.text.TextWatcher;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.AdapterView;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.AutoCompleteTextView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.Spinner;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.core.util.Pair;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.lifecycle.Observer;\r\nimport androidx.lifecycle.ViewModelProvider;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.google.android.material.datepicker.MaterialDatePicker;\r\nimport com.google.android.material.datepicker.MaterialPickerOnPositiveButtonClickListener;\r\nimport com.wang.avi.AVLoadingIndicatorView;\r\nimport com.whitecoats.clinicplus.MyClinicGlobalClass;\r\nimport com.whitecoats.clinicplus.R;\r\nimport com.whitecoats.clinicplus.adapters.PatientSearchAdapter;\r\nimport com.whitecoats.clinicplus.adapters.TransactionsListAdapter;\r\nimport com.whitecoats.clinicplus.apis.ApiUrls;\r\nimport com.whitecoats.clinicplus.interfaces.PaymentTransactionFilterInterface;\r\nimport com.whitecoats.clinicplus.utils.ErrorHandlerClass;\r\nimport com.whitecoats.clinicplus.utils.SharedPref;\r\nimport com.whitecoats.clinicplus.utils.WrapContentLinearLayoutManager;\r\nimport com.whitecoats.clinicplus.viewmodels.AppointmentDetailsViewModel;\r\nimport com.whitecoats.clinicplus.viewmodels.PaymentTransactionViewModel;\r\nimport com.whitecoats.clinicplus.viewmodels.SearchPatientViewModel;\r\nimport com.whitecoats.model.PatientPListModel;\r\nimport com.whitecoats.model.PaymentTransactionModel;\r\n\r\nimport org.json.JSONArray;\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\n\r\nimport static com.whitecoats.clinicplus.LIstener.PaginationListener.PAGE_START;\r\nimport static com.whitecoats.clinicplus.utils.RestUtils.TAG_DATA;\r\nimport static com.whitecoats.clinicplus.utils.RestUtils.TAG_ORDER;\r\nimport static com.whitecoats.clinicplus.utils.RestUtils.TAG_ORDER_USER;\r\nimport static com.whitecoats.clinicplus.utils.RestUtils.TAG_PAYMENTS_DO_AUTO_REFUND;\r\nimport static com.whitecoats.clinicplus.utils.RestUtils.TAG_PAYMENTS_NET_TOTAL_PAID;\r\nimport static com.whitecoats.clinicplus.utils.RestUtils.TAG_PAYMENTS_PAYMENT_STATUS;\r\nimport static com.whitecoats.clinicplus.utils.RestUtils.TAG_PAYMENTS_REFUND_AMT;\r\nimport static com.whitecoats.clinicplus.utils.RestUtils.TAG_PAYMENTS_REFUND_PROCESSED;\r\nimport static com.whitecoats.clinicplus.utils.RestUtils.TAG_PAYMENTS_REFUND_STATUS;\r\nimport static com.whitecoats.clinicplus.utils.RestUtils.TAG_PAYMENTS_SETTLEMENT_PROCESSED;\r\nimport static com.whitecoats.clinicplus.utils.RestUtils.TAG_PAYMENTS_SETTLEMENT_TRIGGERED;\r\nimport static com.whitecoats.clinicplus.utils.RestUtils.TAG_PRODUCTS;\r\nimport static com.whitecoats.clinicplus.utils.RestUtils.TAG_RESPONSE;\r\nimport static com.whitecoats.clinicplus.utils.RestUtils.TAG_STATUS;\r\n\r\npublic class TransactionsFragment extends Fragment {\r\n    \r\n    private TransactionsListAdapter transactionsListAdapter;\r\n    private RecyclerView transactionsRecycleView;\r\n    boolean isLoading = false;\r\n    private int currentPage = PAGE_START;\r\n    private boolean isLastPage = false;\r\n    int currentItems, totalItems, scrolledOutItems;\r\n\r\n    Spinner daysTransaction_spinner;\r\n    public String dateFilterSelection = \"\";\r\n    private RecyclerView.LayoutManager mLayoutManager;\r\n    public static List<PaymentTransactionModel> paymentTransactionModelList;\r\n    RelativeLayout layout_filter, layout_days;\r\n    TransactionsFilterBottomSheet transactionsFilterBottomSheet;\r\n    TextView transaction_noText, paymentsTransactionsText;\r\n    AutoCompleteTextView patient_autoSearchView;\r\n    private CharSequence onTextChangePatientName;\r\n    public static String modePaymentAllFilter = \"\";\r\n    public static String apptStatusAllFilter = \"ALl\";\r\n    public static String modePaymentOnlineFilter, modePaymentOfflineFilter;\r\n    public static int pendingPatientAllFilter, pendingPatientFilter, receivedPatientFilter, pendingSettlementFilter, partialSettlePendingFilter, settlementDoneFilter, partialSettlementDoneFilter, scheduledRefundFilter, pendingRefundFilter, refundCompletedFilter;\r\n    public String statusActiveFilter, statusCompletedFilter;\r\n    public static String searchFilter = \"\", modeOfConsultFilter = \"\", paymentModeFilter = \"All\", paymentStatusFilter = \"\", apptStatusFilter = \"All\";\r\n    public String consultMode, paymentMode, paymentAll, paymentReceived, paymentPending, paymentPendingSettlement, paymentCompleteSettlement;\r\n    public String paymentPendingRefund, paymentCompleteRefund, paymentPartialRefund, paymentPartialRefundDone, paymentPartialRefundPending;\r\n    public String paymentScheduleRefund, apptStatus;\r\n    public int page = 50;\r\n    public static int pageNumber = 1;\r\n    private LinearLayout transaction_NoPatient_layout;\r\n    int c = 0;\r\n    private ArrayList<Integer> groupData;\r\n    private MyClinicGlobalClass globalClass;\r\n    private JSONObject param = new JSONObject();\r\n    private ProgressDialog progressDialog;\r\n    public String perPageString = \"20\";\r\n    private List<PatientPListModel> patientPListModelList;\r\n    private PatientSearchAdapter patientSearchAdapter;\r\n    PaymentTransactionViewModel paymentTransactionViewModel;\r\n    private SearchPatientViewModel searchPatientViewModel;\r\n    JSONObject orderValue, productValue, orderUser, orderReceipt;\r\n    JSONArray userProfile;\r\n    String profileName,generalID, profilePhNumber, orderDetails_date, patient_payment_status;\r\n    String net_total_paid_amount, refund_amt;\r\n    int status, refund_status, is_refund_processed, is_do_auto_refund, is_settlement_processed, is_settlement_triggered;\r\n    private String selectedFromDate = \"\";\r\n    private String selectedToDate = \"\";\r\n    private String sortby = \"order_date\";\r\n    private String sortorder = \"desc\";\r\n    private ArrayAdapter daysTransactionAdapter;\r\n    private String[] daysTransaction = {\"All\", \"Today\", \"This Week\", \"This Month\", \"This Year\", \"Specific Dates\"};\r\n    private AppointmentDetailsViewModel appointmentDetailsViewModel;\r\n    public static JSONArray invoiceServiceArray;\r\n    public static JSONArray invoiceServiceArrayAppended;\r\n    public static JSONArray originalServiceArrayData;\r\n    private JSONArray changeArray;\r\n    int appointmentOrderAmount;\r\n    int appointmentOrderAmountDiscount;\r\n    int appointmentNetAmount;\r\n\r\n    public static JSONArray invoiceServiceArrayData;\r\n    public static double invoicePreTaxAmount;\r\n    public static double invoicePreTaxDiscount;\r\n    public static double invoicePreTaxTotal;\r\n    public static double invoiceTotalTax;\r\n    public static double invoiceNetAmount;\r\n    public static double invoicePostTaxDiscount;\r\n    public static double invoiceGrandAmount;\r\n    public static double invoiceGrandDiscount;\r\n    public static double invoiceGrandPreTax;\r\n    public static double invoiceGrandTax;\r\n    public static double invoiceGrandTotal;\r\n\r\n    private SharedPref sharedPref = null;\r\n\r\n    int appointmentId;\r\n    int orderId;\r\n    private String[] dates;\r\n    private boolean dontDisplayCalender = false;\r\n    private int check = 0;\r\n    private WrapContentLinearLayoutManager mLinearLayoutManager;\r\n    private boolean loading = false;\r\n    private boolean isListExhausted = false;\r\n    private AVLoadingIndicatorView aviInTransactionTab;\r\n    private TextView transactionsTabFilterText, emptyText;\r\n    public static int count = 5;\r\n    private BroadcastReceiver broadcastReceiver;\r\n\r\n    public TransactionsFragment() {\r\n    }\r\n\r\n    @Override\r\n    public void onCreate(@Nullable Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        registerTransactionUpdateReceiver();\r\n    }\r\n\r\n    public static TransactionsFragment newInstance(String mModePaymentAllFilter, String mStatus, int mPendingSettlementFilter, int mSettlementDoneFilter, int mPendingRefundFilter, int mRefundCompletedFilter, int mPartialSettlementDoneFilter, int mPartialSettlePendingFilter, int mScheduledRefundFilter, int mPaymentCompletedFilter, int filterCount) {\r\n        TransactionsFragment fragment = new TransactionsFragment();\r\n        Bundle args = new Bundle();\r\n        args.putString(\"ModePaymentAllFilter\", mModePaymentAllFilter);\r\n        args.putString(\"Status\", mStatus);\r\n        args.putInt(\"PendingSettlementFilter\", mPendingSettlementFilter);\r\n        args.putInt(\"SettlementDoneFilter\", mSettlementDoneFilter);\r\n        args.putInt(\"PendingRefundFilter\", mPendingRefundFilter);\r\n        args.putInt(\"RefundCompletedFilter\", mRefundCompletedFilter);\r\n        args.putInt(\"PartialSettlementDoneFilter\", mPartialSettlementDoneFilter);\r\n        args.putInt(\"PartialSettlePendingFilter\", mPartialSettlePendingFilter);\r\n        args.putInt(\"ScheduledRefundFilter\", mScheduledRefundFilter);\r\n        args.putInt(\"paymentCompletedFilter\", mPaymentCompletedFilter);\r\n        args.putInt(\"filterCount\", filterCount);\r\n\r\n\r\n        fragment.setArguments(args);\r\n        return fragment;\r\n    }\r\n\r\n    @Nullable\r\n    @Override\r\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\r\n\r\n        View view = inflater.inflate(R.layout.fragment_transactions, container, false);\r\n        //progressBar_pagination = view.findViewById(R.id.pagination_progressbar);\r\n        transactionsRecycleView = view.findViewById(R.id.recyclerView_transactions);\r\n        patient_autoSearchView = view.findViewById(R.id.transaction_search_patient);\r\n        layout_filter = view.findViewById(R.id.layout_transaction_filter);\r\n        layout_days = view.findViewById(R.id.layout_transaction_days);\r\n        daysTransaction_spinner = view.findViewById(R.id.days_type_transaction);\r\n        transaction_noText = view.findViewById(R.id.transaction_no_record_text);\r\n        paymentsTransactionsText = (TextView) view.findViewById(R.id.paymentsTransactionsText);\r\n        transaction_NoPatient_layout = view.findViewById(R.id.layout_transaction_no_record);\r\n        aviInTransactionTab = (AVLoadingIndicatorView) view.findViewById(R.id.aviInTransactionTab);\r\n        transactionsTabFilterText = (TextView) view.findViewById(R.id.transactionsTabFilterText);\r\n        emptyText = (TextView) view.findViewById(R.id.emptyText);\r\n        globalClass = (MyClinicGlobalClass) getActivity().getApplicationContext();\r\n        progressDialog = new ProgressDialog(getActivity());\r\n        paymentTransactionViewModel = new ViewModelProvider(this).get(PaymentTransactionViewModel.class);\r\n        paymentTransactionViewModel.init();\r\n        searchPatientViewModel = new ViewModelProvider(this).get(SearchPatientViewModel.class);\r\n        searchPatientViewModel.init();\r\n        patientPListModelList = new ArrayList<>();\r\n        groupData = new ArrayList<>();\r\n        patientSearchAdapter = new PatientSearchAdapter(getContext(), R.layout.patient_search_item, patientPListModelList);\r\n        patient_autoSearchView.setAdapter(patientSearchAdapter);\r\n        appointmentDetailsViewModel = new ViewModelProvider(this).get(AppointmentDetailsViewModel.class);\r\n        appointmentDetailsViewModel.init();\r\n        paymentTransactionModelList = new ArrayList<>();\r\n        paymentTransactionModelList.clear();\r\n        if (sharedPref == null) {\r\n            sharedPref = new SharedPref(getActivity());\r\n        }\r\n       /* if (sharedPref.getPref(\"is_show_general_id\", \"\").equalsIgnoreCase(\"1\")) {\r\n            patient_autoSearchView.setHint(getString(R.string.patient_search_text_withID));\r\n        }*/\r\n        modePaymentAllFilter = getArguments().getString(\"ModePaymentAllFilter\");\r\n        apptStatusAllFilter = getArguments().getString(\"Status\");\r\n        pendingSettlementFilter = getArguments().getInt(\"PendingSettlementFilter\");\r\n        settlementDoneFilter = getArguments().getInt(\"SettlementDoneFilter\");\r\n        pendingRefundFilter = getArguments().getInt(\"PendingRefundFilter\");\r\n        refundCompletedFilter = getArguments().getInt(\"RefundCompletedFilter\");\r\n        partialSettlementDoneFilter = getArguments().getInt(\"PartialSettlementDoneFilter\");\r\n        partialSettlePendingFilter = getArguments().getInt(\"PartialSettlePendingFilter\");\r\n        scheduledRefundFilter = getArguments().getInt(\"ScheduledRefundFilter\");\r\n        receivedPatientFilter = getArguments().getInt(\"paymentCompletedFilter\");\r\n        if (getArguments().getInt(\"filterCount\") > 0) {\r\n            count = getArguments().getInt(\"filterCount\");\r\n        }\r\n        layout_filter.setBackground(getContext().getDrawable(R.drawable.transaction_filters_active));\r\n        transactionsTabFilterText.setText(count + \"\");\r\n        paymentsTransactionsText.setText(\"Filters\");\r\n        paymentsTransactionsText.setTextColor(getContext().getResources().getColor(R.color.colorAccent));\r\n        /*selectedFromDate = LocalDate.now();\r\n        selectedToDate = LocalDate.now();*/\r\n        daysTransactionAdapter = new ArrayAdapter(getActivity(), android.R.layout.simple_spinner_dropdown_item, daysTransaction);\r\n        daysTransactionAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n        daysTransaction_spinner.setAdapter(daysTransactionAdapter);\r\n        String filterVale = sharedPref.getPref(\"FilterPaymentOverView\");\r\n        if (filterVale != null) {\r\n            if (filterVale.contains(\"All\")) {\r\n                daysTransaction_spinner.setSelection(0);\r\n            } else if (filterVale.contains(\"Week\")) {\r\n                dateFilterSelection = \"This Week\";\r\n                daysTransaction_spinner.setSelection(2);\r\n            } else if (filterVale.contains(\"Month\")) {\r\n                dateFilterSelection = \"This Month\";\r\n                daysTransaction_spinner.setSelection(3);\r\n            } else if (filterVale.contains(\"Year\")) {\r\n                dateFilterSelection = \"This Year\";\r\n                daysTransaction_spinner.setSelection(4);\r\n            } else if (filterVale.contains(\"Specific_\")) {\r\n                dates = filterVale.split(\"_\");\r\n                dateFilterSelection = \"Specific\";\r\n                selectedFromDate = dates[1];\r\n                selectedToDate = dates[2];\r\n                daysTransaction_spinner.setSelection(5);\r\n                dontDisplayCalender = true;\r\n            }\r\n        } else {\r\n            daysTransaction_spinner.setSelection(0);\r\n        }\r\n        if (!paymentTransactionModelList.isEmpty()) {\r\n            paymentTransactionModelList.clear();\r\n            transactionsListAdapter.notifyDataSetChanged();\r\n        }\r\n        getTransactionsListResponse(pageNumber + \"\", page + \"\", searchFilter, consultMode, paymentMode, paymentAll, paymentReceived, paymentPending, paymentPendingSettlement, paymentCompleteSettlement,\r\n                paymentPendingRefund, paymentCompleteRefund, paymentPartialRefund, paymentPartialRefundDone, paymentPartialRefundPending, paymentScheduleRefund, apptStatus, dateFilterSelection,\r\n                selectedFromDate, selectedToDate);\r\n        transactionsFilterBottomSheet = new TransactionsFilterBottomSheet();\r\n\r\n\r\n        transactionsListAdapter = new TransactionsListAdapter(getContext(), getActivity(), paymentTransactionModelList);\r\n        mLinearLayoutManager = new WrapContentLinearLayoutManager(getActivity());\r\n        mLinearLayoutManager.setOrientation(LinearLayoutManager.VERTICAL);\r\n        transactionsRecycleView.setLayoutManager(mLinearLayoutManager);\r\n        transactionsRecycleView.setAdapter(transactionsListAdapter);\r\n\r\n\r\n        transactionsRecycleView.addOnScrollListener(new RecyclerView.OnScrollListener() {\r\n            @Override\r\n            public void onScrollStateChanged(@NonNull RecyclerView recyclerView, int newState) {\r\n                super.onScrollStateChanged(recyclerView, newState);\r\n            }\r\n\r\n            @Override\r\n            public void onScrolled(@NonNull RecyclerView recyclerView, int dx, int dy) {\r\n                if (isListExhausted) {\r\n                    return;\r\n                }\r\n                int toatlcount = mLinearLayoutManager.getItemCount();\r\n                int lastitem = mLinearLayoutManager.findLastVisibleItemPosition();\r\n                if (!loading) {\r\n                    if (lastitem != RecyclerView.NO_POSITION && lastitem == (toatlcount - 1)) {\r\n                        pageNumber += 1;\r\n                        getTransactionsListResponse(pageNumber + \"\", page + \"\", searchFilter, consultMode, paymentMode, paymentAll, paymentReceived, paymentPending, paymentPendingSettlement, paymentCompleteSettlement,\r\n                                paymentPendingRefund, paymentCompleteRefund, paymentPartialRefund, paymentPartialRefundDone, paymentPartialRefundPending, paymentScheduleRefund, apptStatus, dateFilterSelection,\r\n                                selectedFromDate, selectedToDate);\r\n                        loading = true;\r\n                    } else {\r\n                        loading = false;\r\n                    }\r\n                }\r\n                super.onScrolled(recyclerView, dx, dy);\r\n            }\r\n        });\r\n        daysTransaction_spinner.setOnFocusChangeListener(new View.OnFocusChangeListener() {\r\n            @Override\r\n            public void onFocusChange(View v, boolean hasFocus) {\r\n                //spinner item selected\r\n            }\r\n        });\r\n\r\n        daysTransaction_spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n                if (++check > 1) {\r\n                    String selectedItem = parent.getItemAtPosition(position).toString();\r\n                    //Today selection\r\n                    if (selectedItem.equalsIgnoreCase(\"All\")) {\r\n                        dateFilterSelection = \"\";\r\n                    }\r\n                    if (selectedItem.equalsIgnoreCase(\"Today\")) {\r\n                        dateFilterSelection = \"Today\";\r\n                    }\r\n                    //This week Selection\r\n                    if (selectedItem.equalsIgnoreCase(\"This Week\")) {\r\n                        dateFilterSelection = \"This Week\";\r\n                    }\r\n                    //This Month selection\r\n                    if (selectedItem.equalsIgnoreCase(\"This Month\")) {\r\n                        dateFilterSelection = \"This Month\";\r\n                    }\r\n                    //This Year selection\r\n                    if (selectedItem.equalsIgnoreCase(\"This Year\")) {\r\n                        dateFilterSelection = \"This Year\";\r\n                    }\r\n                    //specific date selection\r\n                    if (selectedItem.equalsIgnoreCase(\"Specific Dates\")) {\r\n                        dateFilterSelection = \"Specific\";\r\n                        if (!dontDisplayCalender) {\r\n                            MaterialDatePicker.Builder materialDateBuilder = MaterialDatePicker.Builder.dateRangePicker();\r\n                            // now define the properties of the\r\n                            // materialDateBuilder that is title text as SELECT A DATE\r\n                            materialDateBuilder.setTitleText(\"SELECT A DATE\");\r\n                            // now create the instance of the material date\r\n                            // picker\r\n                            final MaterialDatePicker materialDatePicker = materialDateBuilder.build();\r\n                            materialDatePicker.show(getActivity().getSupportFragmentManager(), \"MATERIAL_DATE_PICKER\");\r\n                            // handle select date button which opens the\r\n                            // material design date picker\r\n                            // now handle the positive button click from the\r\n                            // material design date picker\r\n                            materialDatePicker.addOnPositiveButtonClickListener(\r\n                                    new MaterialPickerOnPositiveButtonClickListener<Pair<Long, Long>>() {\r\n                                        @SuppressLint(\"SetTextI18n\")\r\n                                        @Override\r\n                                        public void onPositiveButtonClick(Pair<Long, Long> selection) {\r\n                                            // if the user clicks on the positive\r\n                                            // button that is ok button update the\r\n                                            // selected date\r\n                                            Long selectedFrom = selection.first;\r\n                                            Date firstDate = new Date(selectedFrom);\r\n                                            Long selectedTo = selection.second;\r\n                                            Date secondDate = new Date(selectedTo);\r\n                                            SimpleDateFormat sdf2 = new SimpleDateFormat(\"yyyy-MM-dd\", Locale.getDefault());\r\n                                            //format yyyy-MM-dd\r\n                                            selectedFromDate = sdf2.format(firstDate);\r\n                                            selectedToDate = sdf2.format(secondDate);\r\n                                            //selectionDates = selection;\r\n                                            Toast.makeText(getActivity(), \"Selected Dates is : \" + selectedFromDate + selectedToDate, Toast.LENGTH_LONG);\r\n                                            if (!paymentTransactionModelList.isEmpty()) {\r\n\r\n                                                paymentTransactionModelList.clear();\r\n\r\n                                                transactionsListAdapter.notifyDataSetChanged();\r\n                                            }\r\n                                            getTransactionsListResponse(pageNumber + \"\", page + \"\", searchFilter, consultMode, paymentMode, paymentAll, paymentReceived, paymentPending, paymentPendingSettlement, paymentCompleteSettlement,\r\n                                                    paymentPendingRefund, paymentCompleteRefund, paymentPartialRefund, paymentPartialRefundDone, paymentPartialRefundPending, paymentScheduleRefund, apptStatus, dateFilterSelection,\r\n                                                    selectedFromDate, selectedToDate);\r\n                                        }\r\n                                    });\r\n                        }\r\n\r\n                    }\r\n                    if (!selectedItem.equalsIgnoreCase(\"Specific Dates\")) {\r\n                        if (!paymentTransactionModelList.isEmpty()) {\r\n\r\n                            paymentTransactionModelList.clear();\r\n\r\n                            transactionsListAdapter.notifyDataSetChanged();\r\n                        }\r\n                        getTransactionsListResponse(pageNumber + \"\", page + \"\", searchFilter, consultMode, paymentMode, paymentAll, paymentReceived, paymentPending, paymentPendingSettlement, paymentCompleteSettlement,\r\n                                paymentPendingRefund, paymentCompleteRefund, paymentPartialRefund, paymentPartialRefundDone, paymentPartialRefundPending, paymentScheduleRefund, apptStatus, dateFilterSelection,\r\n                                selectedFromDate, selectedToDate);\r\n                    }\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parent) {\r\n\r\n\r\n            }\r\n        });\r\n\r\n        patient_autoSearchView.setOnItemClickListener(new AdapterView.OnItemClickListener() {\r\n            @Override\r\n            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\r\n                PatientPListModel patientPList = (PatientPListModel) parent.getItemAtPosition(position);\r\n                searchFilter = patientPList.getPatientName();\r\n                patientPListModelList.clear();\r\n                Log.i(\"search test\", \"onclick\");\r\n                if (!paymentTransactionModelList.isEmpty()) {\r\n                    paymentTransactionModelList.clear();\r\n                    transactionsListAdapter.notifyDataSetChanged();\r\n                }\r\n                getTransactionsListResponse(pageNumber + \"\", page + \"\", searchFilter, consultMode, paymentMode, paymentAll, paymentReceived, paymentPending, paymentPendingSettlement, paymentCompleteSettlement,\r\n                        paymentPendingRefund, paymentCompleteRefund, paymentPartialRefund, paymentPartialRefundDone, paymentPartialRefundPending, paymentScheduleRefund, apptStatus, dateFilterSelection,\r\n                        selectedFromDate, selectedToDate);\r\n\r\n            }\r\n        });\r\n        patient_autoSearchView.addTextChangedListener(new TextWatcher() {\r\n            @Override\r\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onTextChanged(CharSequence patientName, int start, int before, int count) {\r\n                onTextChangePatientName = patientName;\r\n                if (patientName.length() == 0) {\r\n                    searchFilter = \"\";\r\n                    pageNumber = 1;\r\n                    c = 0;\r\n                    groupData.clear();\r\n                    patientPListModelList.clear();\r\n                    if (!paymentTransactionModelList.isEmpty()) {\r\n                        paymentTransactionModelList.clear();\r\n                        transactionsListAdapter.notifyDataSetChanged();\r\n                    }\r\n                    getTransactionsListResponse(pageNumber + \"\", page + \"\", searchFilter, consultMode, paymentMode, paymentAll, paymentReceived, paymentPending, paymentPendingSettlement, paymentCompleteSettlement,\r\n                            paymentPendingRefund, paymentCompleteRefund, paymentPartialRefund, paymentPartialRefundDone, paymentPartialRefundPending, paymentScheduleRefund, apptStatus, dateFilterSelection,\r\n                            selectedFromDate, selectedToDate);\r\n                }\r\n                if (patientName.length() > 2) {\r\n                    if (globalClass.isOnline()) {\r\n                        searchPatientViewModel.searchPatient(getActivity(), patientName.toString()).observe(getViewLifecycleOwner(), new Observer<String>() {\r\n                            @Override\r\n                            public void onChanged(String s) {\r\n                                try {\r\n                                    JSONObject jsonObject = new JSONObject(s);\r\n                                    if (jsonObject.getInt(\"status_code\") == 200) {\r\n                                        JSONArray patientDetails = jsonObject.getJSONObject(\"response\").getJSONArray(\"response\");\r\n                                        if (patientDetails.length() == 0) {\r\n                                            transaction_NoPatient_layout.setVisibility(View.VISIBLE);\r\n                                            transaction_noText.setText(\"No Transaction found for the patient '\" + patientName.toString() + \"'\");\r\n                                            transactionsRecycleView.setVisibility(View.GONE);\r\n\r\n                                        } else {\r\n\r\n                                            patientPListModelList.clear();\r\n                                            for (int i = 0; i < patientDetails.length(); i++) {\r\n                                                JSONObject patientDetail = patientDetails.getJSONObject(i);\r\n                                                JSONArray assignCategory = patientDetail.getJSONArray(\"assignedCategories\");\r\n                                                PatientPListModel patientPListModel = new PatientPListModel();\r\n                                                patientPListModel.setPatientName(patientDetail.getString(\"fullname\"));\r\n                                                /*New Registration(Autogenerated ID) changes for Gastro interface*/\r\n                                                patientPListModel.setGeneralID(patientDetail.getString(\"general_id\"));\r\n                                                patientPListModel.setPatientId(patientDetail.getInt(\"id\"));\r\n                                                patientPListModel.setEmailid(patientDetail.getString(\"email\"));\r\n                                                patientPListModel.setPhNo(patientDetail.getString(\"phone\"));\r\n                                                patientPListModel.setPatientAge(patientDetail.getString(\"age\"));\r\n                                                patientPListModel.setPatientGender(patientDetail.getInt(\"gender\"));\r\n                                                patientPListModel.setAssignCategory(assignCategory);\r\n                                                patientPListModelList.add(patientPListModel);\r\n                                            }\r\n                                            patientSearchAdapter.notifyDataSetChanged();\r\n                                        }\r\n                                    } else {\r\n                                        ErrorHandlerClass.INSTANCE.errorHandler(requireContext(), s);\r\n                                    }\r\n                                } catch (JSONException e) {\r\n                                    e.printStackTrace();\r\n                                }\r\n                            }\r\n                        });\r\n                    } else {\r\n                        globalClass.noInternetConnection.showDialog(getActivity());\r\n                    }\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void afterTextChanged(Editable s) {\r\n\r\n            }\r\n        });\r\n\r\n        transactionsFilterBottomSheet.setupBottomSheet(modeOfConsultFilter, modePaymentAllFilter, paymentStatusFilter, pendingPatientFilter, receivedPatientFilter, pendingSettlementFilter, partialSettlePendingFilter, settlementDoneFilter, partialSettlementDoneFilter, scheduledRefundFilter, pendingRefundFilter, refundCompletedFilter, apptStatusAllFilter, new PaymentTransactionFilterInterface() {\r\n            @Override\r\n            public void applyFilter(String modeOfConsultValue, String paymentModeFilter, String paymentStatusFilter, String ApptStatusFilter, int modePaymentAll, int modePaymentOnline, int modePaymentOffline,\r\n                                    int pendingPatientAll, int paymentCompleted, int settlementPending, int refundSchedule, int refundCompleted, int partialRefundPending, int partialRefundCompleted, int paymentPendings, int settlementCompleted, int refundPending, int apptStatusAll, int statusActive, int statusCompleted, int count, boolean clearFilterClicked) {\r\n\r\n                pageNumber = 1;\r\n                modeOfConsultFilter = modeOfConsultValue;\r\n                //modePaymentAllFilter = modePaymentAll;\r\n                modePaymentAllFilter = paymentModeFilter;\r\n\r\n                pendingPatientAllFilter = pendingPatientAll;\r\n                pendingPatientFilter = paymentPendings;\r\n                receivedPatientFilter = paymentCompleted;\r\n                pendingSettlementFilter = settlementPending;\r\n                partialSettlePendingFilter = partialRefundPending;\r\n                settlementDoneFilter = settlementCompleted;\r\n                partialSettlementDoneFilter = partialRefundCompleted;\r\n                scheduledRefundFilter = refundSchedule;\r\n                pendingRefundFilter = refundPending;\r\n                refundCompletedFilter = refundCompleted;\r\n\r\n                apptStatusAllFilter = ApptStatusFilter;\r\n\r\n                if (count > 0) {\r\n\r\n                    layout_filter.setBackground(getContext().getDrawable(R.drawable.transaction_filters_active));\r\n                    transactionsTabFilterText.setText(count + \"\");\r\n                    paymentsTransactionsText.setText(\"Filters\");\r\n                    paymentsTransactionsText.setTextColor(getContext().getResources().getColor(R.color.colorAccent));\r\n                }\r\n\r\n\r\n                if (!clearFilterClicked) {\r\n                    if (!paymentTransactionModelList.isEmpty()) {\r\n                        paymentTransactionModelList.clear();\r\n                        transactionsListAdapter.notifyDataSetChanged();\r\n                    }\r\n                    getTransactionsListResponse(pageNumber + \"\", page + \"\", searchFilter, consultMode, paymentMode, paymentAll, paymentReceived, paymentPending, paymentPendingSettlement, paymentCompleteSettlement,\r\n                            paymentPendingRefund, paymentCompleteRefund, paymentPartialRefund, paymentPartialRefundDone, paymentPartialRefundPending, paymentScheduleRefund, apptStatus, dateFilterSelection,\r\n                            selectedFromDate, selectedToDate);\r\n                }\r\n            }\r\n        });\r\n        layout_filter.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                transactionsFilterBottomSheet.show(getActivity().getSupportFragmentManager(), \"Bottom Sheet Dialog Fragment\");\r\n                MyClinicGlobalClass.logUserActionEvent(ApiUrls.doctorId, getString(R.string.TransactionsPageFiltersScreenImpression), null);\r\n\r\n            }\r\n        });\r\n\r\n        return view;\r\n    }\r\n\r\n    public void getTransactionsListResponse(String perPage, String page1, String searchText, String consultMode, String paymentMode, String paymentAll, String paymentReceived,\r\n                                            String paymentPending, String paymentPendingSettlement, String paymentCompleteSettlement, String paymentPendingRefund, String paymentCompleteRefund,\r\n                                            String paymentPartialRefund, String paymentPartialRefundDone, String paymentPartialRefundPending, String paymentScheduleRefund, String apptStatus,\r\n                                            String dateFilter, String fromDate, String toDate) {\r\n\r\n        if (globalClass.isOnline()) {\r\n            JSONObject jsonValue = new JSONObject();\r\n            try {\r\n                param.put(\"per_page\", page);\r\n                param.put(\"page\", pageNumber);\r\n                if (searchFilter.isEmpty()) {\r\n                    param.put(\"search\", searchText);\r\n                } else {\r\n                    param.put(\"search\", searchFilter);\r\n                }\r\n                param.put(\"mode\", modeOfConsultFilter);\r\n                param.put(\"payment_is_all\", pendingPatientAllFilter);\r\n                param.put(\"payment_is_pending\", pendingPatientFilter);\r\n                param.put(\"payment_is_received\", receivedPatientFilter);\r\n                param.put(\"payment_pendingsettlement\", pendingSettlementFilter);\r\n                param.put(\"payment_partialrefundpending\", partialSettlePendingFilter);\r\n                param.put(\"payment_completesettlement\", settlementDoneFilter);\r\n                param.put(\"payment_partialrefunddone\", partialSettlementDoneFilter);\r\n                param.put(\"payment_schedulerefund\", scheduledRefundFilter);\r\n                param.put(\"payment_pendingrefund\", pendingRefundFilter);\r\n                param.put(\"payment_completerefund\", refundCompletedFilter);\r\n                param.put(\"payment\", modePaymentAllFilter);\r\n                param.put(\"status\", apptStatusAllFilter);\r\n                param.put(\"date_filter\", dateFilterSelection);\r\n                //param.put(\"date_filter\", \"Specific\");\r\n                if (dateFilterSelection.equalsIgnoreCase(\"Specific\")) {\r\n                    param.put(\"fromDate\", selectedFromDate);\r\n                    param.put(\"toDate\", selectedToDate);\r\n                }\r\n                param.put(\"sortby\", sortby);\r\n                param.put(\"sortorder\", sortorder);\r\n\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n            progressDialog.setMessage(\"Please wait..\");\r\n            // progressDialog.show();\r\n            aviInTransactionTab.setVisibility(View.VISIBLE);\r\n            paymentTransactionViewModel.getTransactionsDetails(getActivity(), page, pageNumber, searchText, modeOfConsultFilter, pendingPatientAllFilter,\r\n                    pendingPatientFilter, receivedPatientFilter, pendingSettlementFilter, partialSettlePendingFilter, settlementDoneFilter,\r\n                    partialSettlementDoneFilter, scheduledRefundFilter, pendingRefundFilter, refundCompletedFilter, modePaymentAllFilter, apptStatusAllFilter, dateFilterSelection,\r\n                    selectedFromDate, selectedToDate, sortby, sortorder).observe(getActivity(), new Observer<String>() {\r\n                @Override\r\n                public void onChanged(String s) {\r\n                    loading = false;\r\n                    dontDisplayCalender = false;\r\n                    Log.d(\"Response\", s);\r\n                    // progressDialog.dismiss();\r\n                    aviInTransactionTab.setVisibility(View.GONE);\r\n                    try {\r\n                        JSONObject resObj = new JSONObject(s);\r\n                        int responseLength = 0;\r\n                        if (resObj.getInt(\"status_code\") == 200) {\r\n                            MyClinicGlobalClass.logUserActionEvent(ApiUrls.doctorId, getString(R.string.TransactionsScreenImpression), null);\r\n                            resObj = resObj.getJSONObject(TAG_RESPONSE).getJSONObject(TAG_RESPONSE);\r\n                            int current_page = resObj.optInt(\"current_page\");\r\n                            int last_page = resObj.optInt(\"last_page\");\r\n                            if (last_page == current_page) {\r\n                                isListExhausted = true;\r\n                            }\r\n                            JSONArray jsonArrayData = resObj.getJSONArray(TAG_DATA);\r\n                            if (jsonArrayData.length() > 0) {\r\n                                emptyText.setVisibility(View.GONE);\r\n                                for (int i = 0; i < jsonArrayData.length(); i++) {\r\n                                    responseLength++;\r\n                                    JSONObject tempobj = jsonArrayData.getJSONObject(i);\r\n                                    orderValue = tempobj.getJSONObject(TAG_ORDER);\r\n                                    productValue = orderValue.getJSONObject(TAG_PRODUCTS);\r\n                                    orderUser = orderValue.getJSONObject(TAG_ORDER_USER);\r\n                                    status = tempobj.optInt(TAG_STATUS);\r\n                                    orderDetails_date = orderValue.optString(\"created_at\");\r\n                                    patient_payment_status = orderValue.optString(TAG_PAYMENTS_PAYMENT_STATUS);\r\n                                    refund_status = orderValue.optInt(TAG_PAYMENTS_REFUND_STATUS);\r\n                                    is_refund_processed = orderValue.optInt(TAG_PAYMENTS_REFUND_PROCESSED);\r\n                                    net_total_paid_amount = orderValue.optString(TAG_PAYMENTS_NET_TOTAL_PAID);\r\n                                    refund_amt = orderValue.optString(TAG_PAYMENTS_REFUND_AMT);\r\n                                    is_do_auto_refund = orderValue.optInt(TAG_PAYMENTS_DO_AUTO_REFUND);\r\n                                    is_settlement_processed = orderValue.optInt(TAG_PAYMENTS_SETTLEMENT_PROCESSED);\r\n                                    is_settlement_triggered = orderValue.optInt(TAG_PAYMENTS_SETTLEMENT_TRIGGERED);\r\n                                    refund_amt = orderValue.optString(TAG_PAYMENTS_REFUND_AMT);\r\n                                    profileName = orderUser.optString(\"fname\");\r\n                                    /*New Registration(Autogenerated ID) changes for Gastro interface*/\r\n                                    generalID = orderUser.optString(\"general_id\");\r\n                                    profilePhNumber = orderUser.optString(\"phone\");\r\n\r\n                                    PaymentTransactionModel paymentTransactionModel = new PaymentTransactionModel();\r\n\r\n                                    Object intervention = orderValue.get(\"receipt\");\r\n                                    if (intervention instanceof JSONArray) {\r\n                                        // It's an array\r\n\r\n                                    } else if (intervention instanceof JSONObject) {\r\n                                        // It's an object\r\n                                        JSONObject receiptObject = orderValue.getJSONObject(\"receipt\");\r\n                                        paymentTransactionModel.setReceiptURL(receiptObject.getString(\"public_url\"));\r\n                                        paymentTransactionModel.setOrderReceipt(receiptObject.getString(\"public_url\"));\r\n                                    } else {\r\n                                        paymentTransactionModel.setReceiptURL(\"\");\r\n                                        // It's something else, like a string or number\r\n                                    }\r\n\r\n\r\n                                    Object interventionInvoice = orderValue.get(\"invoice\");\r\n                                    if (interventionInvoice instanceof JSONArray) {\r\n                                        // It's an array\r\n\r\n                                    } else if (interventionInvoice instanceof JSONObject) {\r\n                                        // It's an object\r\n                                        JSONObject receiptObject = orderValue.getJSONObject(\"invoice\");\r\n                                        paymentTransactionModel.setInvoiceUrl(receiptObject.getString(\"public_url\"));\r\n                                        paymentTransactionModel.setOrderInvoice(receiptObject.getString(\"public_url\"));\r\n                                    } else {\r\n                                        paymentTransactionModel.setInvoiceUrl(\"\");\r\n                                        // It's something else, like a string or number\r\n                                    }\r\n                                    JSONObject invoiceObject = null;\r\n                                    if (!orderValue.isNull(\"invoice\")) {\r\n                                        invoiceObject = orderValue.getJSONObject(\"invoice\");\r\n                                    } else {\r\n\r\n                                    }\r\n                                    paymentTransactionModel.setInvoiceData(invoiceObject);\r\n                                    paymentTransactionModel.setOrder_details_date(orderDetails_date);\r\n                                    paymentTransactionModel.setStatus(status);\r\n                                    paymentTransactionModel.setPatientName(profileName);\r\n                                    paymentTransactionModel.setGeneralID(generalID);\r\n                                    paymentTransactionModel.setPh_number(profilePhNumber);\r\n                                    paymentTransactionModel.setPatientPaymentStatus(patient_payment_status);\r\n                                    paymentTransactionModel.setAmount_paid(net_total_paid_amount);\r\n                                    paymentTransactionModel.setRefund_status(refund_status);\r\n                                    paymentTransactionModel.setIs_refund_processed(is_refund_processed);\r\n                                    paymentTransactionModel.setNet_total_paid(net_total_paid_amount);\r\n                                    paymentTransactionModel.setRefund_amt(refund_amt);\r\n                                    paymentTransactionModel.setIs_do_auto_refund(is_do_auto_refund);\r\n                                    paymentTransactionModel.setIs_settlement_processed(is_settlement_processed);\r\n                                    paymentTransactionModel.setIs_settlement_triggered(is_settlement_triggered);\r\n                                    paymentTransactionModel.setUnmapped_status(orderValue.optString(\"unmapped_status\"));\r\n\r\n\r\n                                    paymentTransactionModel.setAppointmentId(tempobj.optInt(\"id\"));\r\n                                    paymentTransactionModel.setOrder_id(tempobj.optInt(\"order_id\"));\r\n                                    paymentTransactionModel.setProductId(productValue.optInt(\"id\"));\r\n                                    paymentTransactionModel.setPayment_title(orderValue.getString(\"payment_title\"));\r\n                                    paymentTransactionModel.setPayment_title_color(orderValue.getString(\"payment_title_color\"));\r\n\r\n                                    paymentTransactionModel.setAppointmentId(tempobj.getInt(\"id\"));\r\n                                    paymentTransactionModel.setOrder_id(tempobj.getInt(\"order_id\"));\r\n                                    paymentTransactionModel.setProductId(productValue.getInt(\"id\"));\r\n                                    paymentTransactionModel.setNetAmountPaid(orderValue.getInt(\"net_total_paid\"));\r\n\r\n                                    paymentTransactionModel.setPaymentStatus(status);\r\n                                    paymentTransactionModel.setMode(tempobj.getInt(\"mode\"));\r\n                                    paymentTransactionModel.setOrderPaymentStatus(orderValue.optString(\"payment_status\"));\r\n                                    paymentTransactionModel.setPayment_mode(orderValue.optString(\"payment_mode\"));\r\n                                    paymentTransactionModel.setSendPaymentNotification(orderValue.optInt(\"send_payment_notification\"));\r\n\r\n\r\n                                    paymentTransactionModelList.add(paymentTransactionModel);\r\n                                }\r\n\r\n                                transactionsListAdapter.notifyDataSetChanged();\r\n                            } else {\r\n\r\n                                emptyText.setVisibility(View.VISIBLE);\r\n                            }\r\n\r\n                        } else {\r\n                            ErrorHandlerClass.INSTANCE.errorHandler(requireContext(), s);\r\n                        }\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                        Log.d(\"TransactionListExc\", \"TransactionListExc\" + e.getMessage());\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            globalClass.noInternetConnection.showDialog(getActivity());\r\n        }\r\n    }\r\n\r\n    public void getServicesForAppointmentData(Activity activity, int appointmentID) {\r\n        appointmentDetailsViewModel.getServicesForAppointmentData(activity, appointmentID).observe(this, new Observer<String>() {\r\n            @Override\r\n            public void onChanged(String s) {\r\n                Log.i(\"capture notes res\", s);\r\n                try {\r\n                    JSONObject response = new JSONObject(s);\r\n                    if (response.getInt(\"status_code\") == 200) {\r\n                        JSONObject resObject = response.getJSONObject(\"response\").getJSONObject(\"response\");\r\n                        invoiceServiceArrayAppended = new JSONArray();\r\n                        changeArray = new JSONArray();\r\n                        originalServiceArrayData = new JSONArray();\r\n                        invoiceServiceArray = resObject.getJSONArray(\"invoice_services\");\r\n                        for (int i = 0; i < invoiceServiceArray.length(); i++) {\r\n                            JSONObject invoiceArrayObject = invoiceServiceArray.getJSONObject(i);\r\n\r\n                            JSONObject eachValue = new JSONObject();\r\n\r\n                            eachValue.put(\"id\", invoiceArrayObject.getInt(\"id\"));\r\n                            eachValue.put(\"appointment_id\", invoiceArrayObject.getInt(\"appointment_id\"));\r\n                            eachValue.put(\"order_id\", invoiceArrayObject.getInt(\"order_id\"));\r\n                            eachValue.put(\"inclusion_type\", invoiceArrayObject.getInt(\"inclusion_type\"));\r\n                            eachValue.put(\"appt_service_id\", invoiceArrayObject.getInt(\"appt_service_id\"));\r\n                            eachValue.put(\"pre_tax_amount\", invoiceArrayObject.getInt(\"pre_tax_amount\"));\r\n                            eachValue.put(\"discount\", invoiceArrayObject.getInt(\"discount\"));\r\n                            eachValue.put(\"final_pre_tax_amount\", invoiceArrayObject.getInt(\"final_pre_tax_amount\"));\r\n                            eachValue.put(\"total\", invoiceArrayObject.getInt(\"total\"));\r\n                            eachValue.put(\"tax_amt\", invoiceArrayObject.getInt(\"tax_amt\"));\r\n                            eachValue.put(\"created_at\", invoiceArrayObject.getString(\"created_at\"));\r\n                            eachValue.put(\"updated_at\", invoiceArrayObject.getString(\"updated_at\"));\r\n                            eachValue.put(\"service_details\", invoiceArrayObject.getJSONObject(\"service_details\"));\r\n                            eachValue.put(\"taxes\", invoiceArrayObject.getJSONArray(\"taxes\"));\r\n                            eachValue.put(\"status\", invoiceArrayObject.getBoolean(\"status\"));\r\n                            eachValue.put(\"percentageApply\", invoiceArrayObject.getInt(\"percentageApply\"));\r\n                            eachValue.put(\"applyDiscount1Flag\", invoiceArrayObject.getInt(\"applyDiscount1Flag\"));\r\n                            int totalPercent = 0;\r\n                            for (int j = 0; j < invoiceArrayObject.getJSONArray(\"taxes\").length(); j++) {\r\n                                JSONObject percentObject = invoiceArrayObject.getJSONArray(\"taxes\").getJSONObject(j);\r\n                                int taxPercentage = percentObject.getInt(\"percentage\");\r\n\r\n                                totalPercent = totalPercent + taxPercentage;\r\n                            }\r\n                            float totalPercentTax = Float.valueOf(totalPercent);\r\n                            float taxesAmountAfterCalculateText = (float) invoiceArrayObject.getInt(\"pre_tax_amount\") / 100 * totalPercentTax;\r\n\r\n                            float finalPostTaxAmount = invoiceArrayObject.getInt(\"pre_tax_amount\") + taxesAmountAfterCalculateText;\r\n\r\n\r\n                            eachValue.put(\"final_post_tax_amount\", finalPostTaxAmount);\r\n                            eachValue.put(\"tax_amount\", taxesAmountAfterCalculateText);\r\n\r\n                            invoiceServiceArrayAppended.put(eachValue);\r\n\r\n                        }\r\n\r\n\r\n                        JSONObject appointmentDataObject = resObject.getJSONObject(\"appt_data\");\r\n                        JSONObject appointmentOrderObject = appointmentDataObject.getJSONObject(\"order\");\r\n                        appointmentOrderAmount = appointmentOrderObject.getInt(\"order_amt\");\r\n                        appointmentOrderAmountDiscount = appointmentOrderObject.getInt(\"discount\");\r\n                        appointmentNetAmount = appointmentOrderObject.getInt(\"net_amount\");\r\n\r\n                        changeArray.put(appointmentOrderObject.getInt(\"order_amt\"));\r\n\r\n                        JSONArray invoiceServiceArray = resObject.getJSONArray(\"invoice_services\");\r\n                        int totalProcedureAmount = 0;\r\n                        if (invoiceServiceArray.length() > 0) {\r\n\r\n                            for (int i = 0; i < invoiceServiceArray.length(); i++) {\r\n                                JSONObject appointmentInvoiceServiceArrayObject = invoiceServiceArray.getJSONObject(i);\r\n\r\n                                changeArray.put(appointmentInvoiceServiceArrayObject.getInt(\"pre_tax_amount\"));\r\n                                originalServiceArrayData.put(appointmentInvoiceServiceArrayObject.getInt(\"pre_tax_amount\"));\r\n\r\n                            }\r\n\r\n                        } else {\r\n\r\n                        }\r\n\r\n                        Log.d(\"changeArrayData:\", \"changeArrayData:\" + changeArray);\r\n\r\n                        getInvoiceDetailsData(getActivity(), orderId, changeArray);\r\n\r\n                    } else {\r\n                        ErrorHandlerClass.INSTANCE.errorHandler(requireContext(), s);\r\n                    }\r\n                } catch (\r\n                        JSONException e) {\r\n                    e.printStackTrace();\r\n                    Log.d(\"parserError:\", \"parserError:\" + e);\r\n                }\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    public void getInvoiceDetailsData(Activity activity, int orderID, JSONArray changeArray) {\r\n        appointmentDetailsViewModel.getInvoiceData(activity, orderID, changeArray).observe(this, new Observer<String>() {\r\n            @Override\r\n            public void onChanged(String s) {\r\n                Log.i(\"invoice details res\", s);\r\n                try {\r\n//                    invoiceServiceModelList.clear();\r\n                    JSONObject response = new JSONObject(s);\r\n                    if (response.getInt(\"status_code\") == 200) {\r\n                        JSONObject resObject = response.getJSONObject(\"response\").getJSONObject(\"response\");\r\n\r\n                        invoicePreTaxAmount = resObject.getDouble(\"invoicePreTaxAmount\");\r\n                        invoicePreTaxDiscount = resObject.getDouble(\"invoicePreTaxDiscount\");\r\n                        invoicePreTaxTotal = resObject.getDouble(\"invoicePreTaxTotal\");\r\n                        invoiceTotalTax = resObject.getDouble(\"invoiceTotalTax\");\r\n                        invoiceNetAmount = resObject.getDouble(\"invoiceNetAmount\");\r\n                        invoicePostTaxDiscount = resObject.getDouble(\"invoicePostTaxDiscount\");\r\n                        invoiceGrandAmount = resObject.getDouble(\"invoiceGrandAmount\");\r\n                        invoiceGrandDiscount = resObject.getDouble(\"invoiceGrandDiscount\");\r\n                        invoiceGrandPreTax = resObject.getDouble(\"invoiceGrandPreTax\");\r\n                        invoiceGrandTax = resObject.getDouble(\"invoiceGrandTax\");\r\n                        invoiceGrandTotal = resObject.getDouble(\"invoiceGrandTotal\");\r\n\r\n                        invoiceServiceArrayData = resObject.getJSONArray(\"invoice_services\");\r\n\r\n                    } else {\r\n                        ErrorHandlerClass.INSTANCE.errorHandler(requireContext(), s);\r\n                    }\r\n                } catch (\r\n                        JSONException e) {\r\n                    e.printStackTrace();\r\n                    Log.d(\"parserError:\", \"parserError:\" + e);\r\n                }\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        pageNumber = 0;\r\n        super.onDestroy();\r\n        getActivity().unregisterReceiver(broadcastReceiver);\r\n\r\n    }\r\n\r\n    private void registerTransactionUpdateReceiver() {\r\n        broadcastReceiver = new BroadcastReceiver() {\r\n            @Override\r\n            public void onReceive(Context context, Intent intent) {\r\n                if (intent != null) {\r\n                    if (intent.getAction().equals(\"UPDATE_TRANSACTION\")) {\r\n                        // here you can fire your action which you want also get data from intent\r\n                        Bundle bundle = intent.getExtras();\r\n                        if (bundle != null) {\r\n                            int order_id = bundle.getInt(\"orderId\");\r\n                            PaymentTransactionModel transactionModelObj = paymentTransactionModelList.stream().filter(e -> e.getOrder_id() == order_id).findAny().orElse(null);\r\n                            if (transactionModelObj != null) {\r\n                                if (bundle.containsKey(\"invoiceURL\")) {\r\n                                    String invoiceURL = bundle.getString(\"invoiceURL\");\r\n                                    transactionModelObj.setInvoiceUrl(invoiceURL);\r\n                                }\r\n                                if (bundle.containsKey(\"totalAmountPaidForTransAppoint\")) {\r\n                                    String amountPaid = bundle.getString(\"totalAmountPaidForTransAppoint\");\r\n                                    transactionModelObj.setAmount_paid(amountPaid);\r\n                                }\r\n                                if (bundle.containsKey(\"receiptURL\")) {\r\n                                    String receiptURL = bundle.getString(\"receiptURL\");\r\n                                    transactionModelObj.setReceiptURL(receiptURL);\r\n                                }\r\n                                if (bundle.containsKey(\"paymentStatus\")) {\r\n                                    String paymentStatus = bundle.getString(\"paymentStatus\");\r\n                                    if (paymentStatus.equalsIgnoreCase(\"success\")) {\r\n                                        transactionModelObj.setPayment_title(\"Payment Completed\");\r\n                                        transactionModelObj.setPayment_title_color(\"green\");\r\n                                        transactionModelObj.setOrderPaymentStatus(\"success\");\r\n                                    }\r\n\r\n                                }\r\n                            }\r\n                            transactionsListAdapter.notifyDataSetChanged();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        IntentFilter intentFilter = new IntentFilter();\r\n        intentFilter.addAction(\"UPDATE_TRANSACTION\");\r\n        getActivity().registerReceiver(broadcastReceiver, intentFilter);\r\n    }\r\n\r\n\r\n}\r\n
===================================================================
diff --git a/app/src/main/java/com/whitecoats/clinicplus/fragments/TransactionsFragment.java b/app/src/main/java/com/whitecoats/clinicplus/fragments/TransactionsFragment.java
--- a/app/src/main/java/com/whitecoats/clinicplus/fragments/TransactionsFragment.java	
+++ b/app/src/main/java/com/whitecoats/clinicplus/fragments/TransactionsFragment.java	
@@ -77,7 +77,7 @@
 import static com.whitecoats.clinicplus.utils.RestUtils.TAG_STATUS;
 
 public class TransactionsFragment extends Fragment {
-    
+
     private TransactionsListAdapter transactionsListAdapter;
     private RecyclerView transactionsRecycleView;
     boolean isLoading = false;
