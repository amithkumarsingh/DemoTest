package com.whitecoats.clinicplus.adapters

import android.annotation.SuppressLint
import android.app.Activity
import android.app.AlertDialog
import android.app.Dialog
import android.content.Context
import android.content.Intent
import android.net.Uri
import android.text.SpannableString
import android.text.style.UnderlineSpan
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.*
import androidx.core.content.ContextCompat
import androidx.lifecycle.LifecycleOwner
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.ViewModelStoreOwner
import androidx.recyclerview.widget.RecyclerView
import com.android.volley.Request
import com.whitecoats.clinicplus.*
import com.whitecoats.clinicplus.R
import com.whitecoats.clinicplus.activities.OrderDetailsActivity
import com.whitecoats.clinicplus.activities.PaymentHistoryTimeLineActivity
import com.whitecoats.clinicplus.apis.ApiGetPostMethodCalls
import com.whitecoats.clinicplus.apis.ApiMethodCalls
import com.whitecoats.clinicplus.apis.ApiUrls
import com.whitecoats.clinicplus.interfaces.ApiCallbackInterface
import com.whitecoats.clinicplus.utils.ErrorHandlerClass.errorHandler
import com.whitecoats.clinicplus.viewmodels.AppointmentDetailsViewModel
import com.whitecoats.clinicplus.viewmodels.CommonViewModel
import com.whitecoats.model.PaymentTransactionModel
import org.json.JSONException
import org.json.JSONObject
import java.text.ParseException
import java.text.SimpleDateFormat
import java.util.*

class TransactionsListAdapter(
    private val context: Context,
    private val activity: Activity,
    private val transactionModelList: MutableList<PaymentTransactionModel>
) : RecyclerView.Adapter<RecyclerView.ViewHolder>() {
    private val appointmentApiRequests: AppointmentApiRequests
    private val appUtils: AppUtilities
    private var receiptUrl: String? = null
    private val patientRecordsApi = PatientRecordsApi()
    private val appointmentDetailsViewModel =
        ViewModelProvider(activity as ViewModelStoreOwner)[AppointmentDetailsViewModel::class.java]
    var finalDateTimeStringPopup = ""
    private val globalClass: MyClinicGlobalClass
    private val apiMethodCalls = ApiMethodCalls()
    private val globalApiCall: ApiGetPostMethodCalls
    private lateinit var dialogObj: Dialog
    private var commonViewModel =
        ViewModelProvider(activity as ViewModelStoreOwner)[CommonViewModel::class.java]

    init {
        appointmentDetailsViewModel.init()
        appointmentApiRequests = AppointmentApiRequests()
        globalClass = context.applicationContext as MyClinicGlobalClass
        appUtils = AppUtilities()
        globalApiCall = ApiGetPostMethodCalls()
    }

    fun showCustomProgressAlertDialog(
        title: String?,
        progressVal: String?

    ) {
        val builder = AlertDialog.Builder(activity)
        builder.setTitle(title)
        builder.setCancelable(false)
        val customLayout =
            LayoutInflater.from(activity)
                .inflate(R.layout.custom_progress_bar, null)
        builder.setView(customLayout)
        dialogObj = builder.create()
        val tvBody = customLayout.findViewById<TextView>(R.id.tv_value)
        tvBody.text = progressVal
        dialogObj.show()
    }

    override fun onCreateViewHolder(viewGroup: ViewGroup, viewType: Int): RecyclerView.ViewHolder {
        val view = LayoutInflater.from(viewGroup.context)
            .inflate(R.layout.list_transactions, viewGroup, false)
        return MyViewHolder(view)
    }

    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {
        val itemViewHolder = holder as MyViewHolder
        val paymentTransactionModel = transactionModelList[position]
        /*New Registration(Autogenerated ID) changes for Gastro interface*/
        // if (sharedPref.getPref("is_show_general_id", "").equalsIgnoreCase("1")) {
        if (paymentTransactionModel.generalID != null && !paymentTransactionModel.generalID.equals(
                "",
                ignoreCase = true
            )
        ) {
            itemViewHolder.tvPatientGeneralId.visibility = View.VISIBLE
            itemViewHolder.tvPatientGeneralId.text = paymentTransactionModel.generalID
        } else {
            itemViewHolder.tvPatientGeneralId.visibility = View.GONE
        }
        /*} else {
            itemViewHolder.tvPatientGeneralId.setVisibility(View.GONE);
        }*/itemViewHolder.patientName.text = paymentTransactionModel.patientName
        itemViewHolder.patient_phoneNo.text = paymentTransactionModel.ph_number
        var finalDateTimeString = ""
        try {
            val month_date = SimpleDateFormat("MMM yyyy", Locale.ENGLISH)
            val sdf = SimpleDateFormat("yyyy-MM-dd", Locale.ENGLISH)
            val date_time = paymentTransactionModel.order_details_date
            val splitDateTime =
                date_time!!.split(" ".toRegex()).dropLastWhile { it.isEmpty() }.toTypedArray()
            val dateString = splitDateTime[0]
            val dateSplitedString =
                dateString.split("-".toRegex()).dropLastWhile { it.isEmpty() }.toTypedArray()
            val time = splitDateTime[1]
            //String[] timeSplitedString = time.split(":");
            val date = sdf.parse(dateString)
            val month_name = month_date.format(date!!)
            val formattedTime = appUtils.formatTimeBasedOnPreference(context, "HH:mm:ss", time)
            finalDateTimeString = dateSplitedString[2] + month_name + " @ " + formattedTime
        } catch (e: ParseException) {
            e.printStackTrace()
        }
        itemViewHolder.apptDateTime.text = finalDateTimeString
        itemViewHolder.tv_order_details.text = "Order Details #" + paymentTransactionModel.order_id
        itemViewHolder.total_amt.text = paymentTransactionModel.amount_paid
        if (paymentTransactionModel.payment_title!!.isNotEmpty()) {
            itemViewHolder.patient_status.text = paymentTransactionModel.payment_title
            if (paymentTransactionModel.payment_title_color.equals("yellow", ignoreCase = true)) {
                itemViewHolder.patient_status.setTextColor(
                    ContextCompat.getColor(
                        activity,
                        R.color.colorDarkInfo
                    )
                )
                itemViewHolder.bulletPoint.setTextColor(
                    ContextCompat.getColor(
                        activity,
                        R.color.colorDarkInfo
                    )
                )
            } else if (paymentTransactionModel.payment_title_color.equals(
                    "green",
                    ignoreCase = true
                )
            ) {
                itemViewHolder.patient_status.setTextColor(
                    ContextCompat.getColor(
                        activity,
                        R.color.colorSuccess
                    )
                )
                itemViewHolder.bulletPoint.setTextColor(
                    ContextCompat.getColor(
                        activity,
                        R.color.colorSuccess
                    )
                )
            } else if (paymentTransactionModel.payment_title_color.equals(
                    "blue",
                    ignoreCase = true
                )
            ) {
                itemViewHolder.patient_status.setTextColor(
                    ContextCompat.getColor(
                        activity,
                        R.color.colorAccent
                    )
                )
                itemViewHolder.bulletPoint.setTextColor(
                    ContextCompat.getColor(
                        activity,
                        R.color.colorAccent
                    )
                )
            } else if (paymentTransactionModel.payment_title_color.equals(
                    "red",
                    ignoreCase = true
                )
            ) {
                itemViewHolder.patient_status.setTextColor(
                    ContextCompat.getColor(
                        activity,
                        R.color.colorDanger
                    )
                )
                itemViewHolder.bulletPoint.setTextColor(
                    ContextCompat.getColor(
                        activity,
                        R.color.colorDanger
                    )
                )
            }
            itemViewHolder.patient_status.visibility = View.VISIBLE
            itemViewHolder.bulletPoint.visibility = View.VISIBLE
        } else {
            itemViewHolder.patient_status.visibility = View.GONE
            itemViewHolder.bulletPoint.visibility = View.GONE
        }
        if (paymentTransactionModel.status < 3) {
            val content = SpannableString("Order Details")
            content.setSpan(UnderlineSpan(), 0, content.length, 0)
            itemViewHolder.orderDetails.text = content
            itemViewHolder.orderDetails.visibility = View.VISIBLE
            itemViewHolder.patientApplic_status.text = "Appointment In-Progress"
            itemViewHolder.appointmentStatusL.visibility = View.VISIBLE
        } else {
            itemViewHolder.appointmentStatusL.visibility = View.GONE
            if (paymentTransactionModel.status == 3) {
                if (paymentTransactionModel.patientPaymentStatus.equals(
                        "pending",
                        ignoreCase = true
                    ) || paymentTransactionModel.patientPaymentStatus.equals(
                        "success",
                        ignoreCase = true
                    )
                ) {
                    itemViewHolder.orderDetails.visibility = View.VISIBLE
                    if (paymentTransactionModel.invoiceUrl === "") {
                        val content = SpannableString("Create Invoice")
                        content.setSpan(UnderlineSpan(), 0, content.length, 0)
                        itemViewHolder.orderDetails.text = content
                    } else {
                        val content = SpannableString("View Invoice")
                        content.setSpan(UnderlineSpan(), 0, content.length, 0)
                        itemViewHolder.orderDetails.text = content
                    }
                }
            } else if (paymentTransactionModel.status == 4 && paymentTransactionModel.patientPaymentStatus.equals(
                    "success",
                    ignoreCase = true
                )
            ) {
                if (paymentTransactionModel.patientPaymentStatus.equals(
                        "success",
                        ignoreCase = true
                    )
                ) {
                    itemViewHolder.orderDetails.visibility = View.VISIBLE
                    if (paymentTransactionModel.invoiceUrl === "") {
                        val content = SpannableString("Create Invoice")
                        content.setSpan(UnderlineSpan(), 0, content.length, 0)
                        itemViewHolder.orderDetails.text = content
                    } else {
                        val content = SpannableString("View Invoice")
                        content.setSpan(UnderlineSpan(), 0, content.length, 0)
                        itemViewHolder.orderDetails.text = content
                    }
                }
            }
        }
        itemViewHolder.createReceipt.setTextColor(
            ContextCompat.getColor(
                activity,
                R.color.colorPrimary
            )
        )
        itemViewHolder.createReceipt.visibility = View.VISIBLE
        if (paymentTransactionModel.receiptURL === "") {
            //itemViewHolder.createReceipt.setText("Create Receipt");
            val content = SpannableString("Create Receipt")
            content.setSpan(UnderlineSpan(), 0, content.length, 0)
            itemViewHolder.createReceipt.text = content
        } else {
            // itemViewHolder.createReceipt.setText("View Receipt");
            val content = SpannableString("View Receipt")
            content.setSpan(UnderlineSpan(), 0, content.length, 0)
            itemViewHolder.createReceipt.text = content
        }
        if (paymentTransactionModel.refund_status == 0 && paymentTransactionModel.is_do_auto_refund == 1) {
            itemViewHolder.createReceipt.visibility = View.VISIBLE
            // itemViewHolder.createReceipt.setText("Cancel Refund");
            val content = SpannableString("Cancel Refund")
            content.setSpan(UnderlineSpan(), 0, content.length, 0)
            itemViewHolder.createReceipt.text = content
            itemViewHolder.createReceipt.setTextColor(
                ContextCompat.getColor(
                    activity,
                    R.color.colorDanger
                )
            )
        }
        if (paymentTransactionModel.status < 3 && paymentTransactionModel.patientPaymentStatus.equals(
                "pending",
                ignoreCase = true
            )
        ) {
            itemViewHolder.createReceipt.visibility = View.GONE
            itemViewHolder.orderDetails.visibility = View.VISIBLE
        }
        itemViewHolder.transactionCardLayout.setOnClickListener {
            val orderDetailsIntent = Intent(context, OrderDetailsActivity::class.java)
            orderDetailsIntent.putExtra("apptID", paymentTransactionModel.appointmentId)
            orderDetailsIntent.putExtra("orderID", paymentTransactionModel.order_id)
            orderDetailsIntent.putExtra("productId", paymentTransactionModel.productId)
            orderDetailsIntent.putExtra("apptID", paymentTransactionModel.appointmentId)
            orderDetailsIntent.putExtra("orderID", paymentTransactionModel.order_id)
            orderDetailsIntent.putExtra("productId", paymentTransactionModel.productId)
            orderDetailsIntent.putExtra("receiptURL", paymentTransactionModel.receiptURL)
            orderDetailsIntent.putExtra("invoiceUrl", paymentTransactionModel.invoiceUrl)
            orderDetailsIntent.putExtra("refundAmount", paymentTransactionModel.refund_amt)
            orderDetailsIntent.putExtra("netPaidAmount", paymentTransactionModel.netAmountPaid)
            orderDetailsIntent.putExtra("status", paymentTransactionModel.paymentStatus)
            orderDetailsIntent.putExtra("mode", paymentTransactionModel.mode)
            orderDetailsIntent.putExtra(
                "orderPaymentStatus",
                paymentTransactionModel.orderPaymentStatus
            )
            orderDetailsIntent.putExtra(
                "sendPaymentNotification",
                paymentTransactionModel.sendPaymentNotification
            )
            orderDetailsIntent.putExtra("paymentMode", paymentTransactionModel.payment_mode)
            context.startActivity(orderDetailsIntent)
        }
        itemViewHolder.orderDetails.setOnClickListener { v: View? ->
            if (itemViewHolder.orderDetails.text.toString().equals(
                    "Order Details",
                    ignoreCase = true
                ) || itemViewHolder.orderDetails.text.toString()
                    .equals("Create Invoice", ignoreCase = true)
            ) {
                val orderDetailsIntent = Intent(context, OrderDetailsActivity::class.java)
                orderDetailsIntent.putExtra("apptID", paymentTransactionModel.appointmentId)
                orderDetailsIntent.putExtra("orderID", paymentTransactionModel.order_id)
                orderDetailsIntent.putExtra("productId", paymentTransactionModel.productId)
                orderDetailsIntent.putExtra("apptID", paymentTransactionModel.appointmentId)
                orderDetailsIntent.putExtra("orderID", paymentTransactionModel.order_id)
                orderDetailsIntent.putExtra("productId", paymentTransactionModel.productId)
                orderDetailsIntent.putExtra("receiptURL", paymentTransactionModel.receiptURL)
                orderDetailsIntent.putExtra("invoiceUrl", paymentTransactionModel.invoiceUrl)
                orderDetailsIntent.putExtra("refundAmount", paymentTransactionModel.refund_amt)
                orderDetailsIntent.putExtra("netPaidAmount", paymentTransactionModel.netAmountPaid)
                orderDetailsIntent.putExtra("status", paymentTransactionModel.paymentStatus)
                orderDetailsIntent.putExtra("mode", paymentTransactionModel.mode)
                orderDetailsIntent.putExtra(
                    "orderPaymentStatus",
                    paymentTransactionModel.orderPaymentStatus
                )
                orderDetailsIntent.putExtra(
                    "sendPaymentNotification",
                    paymentTransactionModel.sendPaymentNotification
                )
                orderDetailsIntent.putExtra("paymentMode", paymentTransactionModel.payment_mode)
                context.startActivity(orderDetailsIntent)
            } else {
                if (itemViewHolder.orderDetails.text.toString()
                        .equals("View Invoice", ignoreCase = true)
                ) {
                    getFileFromUrl(paymentTransactionModel.invoiceUrl)
                }
            }
        }
        itemViewHolder.patientHistory.setOnClickListener { v: View? ->
            val paymentHistoryIntent = Intent(context, PaymentHistoryTimeLineActivity::class.java)
            paymentHistoryIntent.putExtra("apptID", paymentTransactionModel.appointmentId)
            paymentHistoryIntent.putExtra("orderId", paymentTransactionModel.order_id)
            paymentHistoryIntent.putExtra("refundAmt", paymentTransactionModel.refund_amt)
            paymentHistoryIntent.putExtra("receiptUrl", paymentTransactionModel.receiptURL)
            paymentHistoryIntent.putExtra("invoiceData", paymentTransactionModel.invoiceUrl)
            context.startActivity(paymentHistoryIntent)
        }
        itemViewHolder.createReceipt.setOnClickListener(object : View.OnClickListener {
            override fun onClick(v: View) {
                if (itemViewHolder.createReceipt.text.toString()
                        .equals("Create Receipt", ignoreCase = true)
                ) {
                    if (paymentTransactionModel.patientPaymentStatus.equals(
                            "pending",
                            ignoreCase = true
                        )
                    ) {
                        val dialog = Dialog(context)
                        dialog.setCancelable(false)
                        dialog.setContentView(R.layout.create_receipt_dialog)
                        val spinner_paymentMode =
                            dialog.findViewById<View>(R.id.spinner_paymentMode) as Spinner
                        val amount_editText =
                            dialog.findViewById<View>(R.id.amount_editText) as EditText
                        val dailogArticleCancel =
                            dialog.findViewById<View>(R.id.dailogArticleCancel) as ImageView
                        val close_textView =
                            dialog.findViewById<View>(R.id.close_textView) as TextView
                        dailogArticleCancel.setOnClickListener { view12: View? -> dialog.dismiss() }
                        close_textView.setOnClickListener { view13: View? -> dialog.dismiss() }
                        val url =
                            ApiUrls.orderPaymentAmount + "?order_id=" + paymentTransactionModel.order_id
                        apiMethodCalls.getApiData(
                            url,
                            null,
                            activity,
                            object : ApiCallbackInterface {
                                override fun onSuccessResponse(response: String) {
                                    try {
                                        val jsonObject = JSONObject(response)
                                        val response1 = jsonObject.optJSONObject("response")!!
                                            .optJSONObject("response")
                                        amount_editText.setText(
                                            response1!!.optInt("amount").toString()
                                        )
                                        if (response1.optBoolean("is_have_incs")) {
                                            amount_editText.isFocusable = false
                                            amount_editText.isFocusableInTouchMode = false
                                            amount_editText.isClickable = false
                                        } else {
                                            amount_editText.isFocusable = true
                                            amount_editText.isFocusableInTouchMode = true
                                            amount_editText.isClickable = true
                                            amount_editText.setSelection(amount_editText.text.length)
                                        }
                                    } catch (e: JSONException) {
                                        e.printStackTrace()
                                    }
                                }

                                override fun onErrorResponse(error: String) {
                                    //Toast.makeText(context, error, Toast.LENGTH_SHORT).show()
                                    errorHandler(context,error)
                                }
                            })
                        val createReceiptText =
                            dialog.findViewById<View>(R.id.createReceiptText) as TextView
                        createReceiptText.setOnClickListener { view14: View? ->
                            if (globalClass.isOnline) {
                                if (spinner_paymentMode.selectedItemPosition == 0) {
                                    Toast.makeText(
                                        context,
                                        "Please select payment mode",
                                        Toast.LENGTH_LONG
                                    ).show()
                                } else {
                                    val paymentModespin =
                                        spinner_paymentMode.selectedItem.toString()
                                    var paymentMode = ""
                                    if (paymentModespin.equals("Cash", ignoreCase = true)) {
                                        paymentMode = "Cash"
                                    } else if (paymentModespin.equals(
                                            "Credit Card",
                                            ignoreCase = true
                                        )
                                    ) {
                                        paymentMode = "CC"
                                    }
                                    if (paymentModespin.equals(
                                            "Debit Card",
                                            ignoreCase = true
                                        )
                                    ) {
                                        paymentMode = "DC"
                                    }
                                    if (paymentModespin.equals(
                                            "Net Banking",
                                            ignoreCase = true
                                        )
                                    ) {
                                        paymentMode = "Net Banking"
                                    } else if (paymentModespin.equals(
                                            "Offline Collection",
                                            ignoreCase = true
                                        )
                                    ) {
                                        paymentMode = "Offline Collection"
                                    }
                                    val amountPaid = amount_editText.text.toString()
                                    updatePaymentStatus(
                                        amountPaid,
                                        paymentTransactionModel.order_id,
                                        paymentMode,
                                        true,
                                        itemViewHolder,
                                        paymentTransactionModel,
                                        dialog
                                    )
                                }
                            } else {
                                globalClass.noInternetConnection.showDialog(activity)
                            }
                        }
                        val paymentMode: MutableList<String> = ArrayList()
                        paymentMode.add("Select Payment Mode")
                        paymentMode.add("Cash")
                        paymentMode.add("Credit Card")
                        paymentMode.add("Debit Card")
                        paymentMode.add("Net Banking")

                        // Creating adapter for spinner
                        val dataAdapterPaymentMode = ArrayAdapter(
                            context, android.R.layout.simple_spinner_item, paymentMode
                        )

                        // Drop down layout style - list view with radio button
                        dataAdapterPaymentMode.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)

                        // attaching data adapter to spinner
                        spinner_paymentMode.adapter = dataAdapterPaymentMode
                        dialog.show()
                        val window = dialog.window
                        window!!.setLayout(
                            ViewGroup.LayoutParams.MATCH_PARENT,
                            ViewGroup.LayoutParams.WRAP_CONTENT
                        )
                    } else {
                        createReceipt(
                            paymentTransactionModel.order_id,
                            paymentTransactionModel,
                            itemViewHolder
                        )
                    }
                    ConfirmOrderActivity.confirmOrderFlag = 0
                } else if (itemViewHolder.createReceipt.text.toString()
                        .equals("View Receipt", ignoreCase = true)
                ) {
                    getReceiptUrl(paymentTransactionModel.receiptURL!!)
                } else {
                    cancelRefundPopup(
                        paymentTransactionModel.order_id,
                        paymentTransactionModel.order_details_date!!,
                        paymentTransactionModel.refund_amt!!.toInt()
                    )
                    ConfirmOrderActivity.confirmOrderFlag = 0
                }
            }

/*
            fun sendPaymentLink() {

                val jsonValue = JSONObject()
                try {
                    jsonValue.put("appointment_id", paymentTransactionModel.appointmentId)
                    apiMethodCalls.postApiData(
                        ApiUrls.sendPaymentReminder,
                        jsonValue,
                        activity,
                        object : ApiCallbackInterface {
                            override fun onSuccessResponse(response: String) {
                                try {
                                    val jsonObject = JSONObject(response)
                                    if (jsonObject.getInt("status_code") == 200) {
                                        val response1 =
                                            JSONObject(response).getJSONObject("response")
                                        val responseValue = response1.getInt("response")
                                        if (responseValue == 1) {
                                            Toast.makeText(
                                                context,
                                                "Patient has been notified successfully.",
                                                Toast.LENGTH_SHORT
                                            ).show()
                                        } else {
                                        }
                                    } else {
                                        errorHandler(activity, response)
                                    }
                                } catch (e: JSONException) {
                                    e.printStackTrace()
                                }
                            }

                            override fun onErrorResponse(error: String) {
                            }
                        })
                } catch (e: Exception) {
                }
            }
*/

            @SuppressLint("NotifyDataSetChanged")
            private fun updatePaymentStatus(
                amountPaid: String,
                order_id: Int,
                paymentMode: String,
                isGeneratedReceipt: Boolean,
                itemViewHolder: MyViewHolder,
                paymentTransactionModel: PaymentTransactionModel,
                dialog: Dialog
            ) {
                showCustomProgressAlertDialog(
                    context.resources.getString(R.string.updating),
                    context.resources.getString(R.string.wait_while_we_updating)
                )
                val url = ApiUrls.updatePaymentStatus
                val jsonValue = JSONObject()
                try {
                    jsonValue.put("order_net_amount", amountPaid.toInt())
                    jsonValue.put("order_id", order_id)
                    jsonValue.put("order_payment_mode", paymentMode)
                    jsonValue.put("isGenerateReport", isGeneratedReceipt)
                } catch (e: Exception) {
                    e.printStackTrace()
                }

                commonViewModel.commonViewModelCall(url, jsonValue, Request.Method.POST).observe(
                    activity as LifecycleOwner
                ) { result ->
                    try {
                        val responseObj = JSONObject(result)
                        if (responseObj.getInt("status_code") == 200) {
                            dialogObj.dismiss()
                            dialog.dismiss()
                            val response = responseObj.optJSONObject("response")
                            val rootObj = response!!.getJSONObject("response")
                            if (isGeneratedReceipt) {
                                val intervention = rootObj["receipt"]
                                if (intervention is JSONObject) {
                                    // It's an object
                                    val receiptObject = rootObj.getJSONObject("receipt")
                                    val receiptUrl = receiptObject.getString("public_url")
                                    paymentTransactionModel.receiptURL = receiptUrl
                                    paymentTransactionModel.payment_title = "Payment Completed"
                                    paymentTransactionModel.payment_title_color = "green"
                                    paymentTransactionModel.orderPaymentStatus = "success"
                                    notifyDataSetChanged()
                                }
                                val showReceipt = "View Receipt"
                                val content = SpannableString(showReceipt)
                                content.setSpan(UnderlineSpan(), 0, showReceipt.length, 0)
                                itemViewHolder.createReceipt.text = content
                            }
                        } else {
                            dialogObj.dismiss()
                            dialog.dismiss()
                            errorHandler(activity, result)
                        }
                    } catch (e: Exception) {
                        dialogObj.dismiss()
                        dialog.dismiss()
                        e.printStackTrace()
                    }
                }
            }
        })
    }

    override fun getItemCount(): Int {
        return transactionModelList.size
    }

    /* private fun createInvoiceData(
         jsonObject: JSONObject,
         paymentTransactionModel: PaymentTransactionModel,
         itemViewHolder: MyViewHolder
     ) {
         val queue = Volley.newRequestQueue(activity)
         val url = ApiUrls.createInvoice + jsonObject
         val jsonObjectRequest: JsonObjectRequest = object : JsonObjectRequest(
             Method.POST, url, jsonObject,
             Response.Listener {
                 try {
                 } catch (e: Exception) {
                     e.printStackTrace()
                 }
             }, Response.ErrorListener { error ->
                 Log.d("Error.Response", error.toString())
             }
         ) {
             @Throws(AuthFailureError::class)
             override fun getHeaders(): Map<String, String> {
                 val headers = HashMap<String, String>()
                 headers["Content-Type"] = "application/json"
                 headers["App-Origin"] =
                     ApiUrls.appOrigin //eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vNGRkYjMxNjkubmdyb2suaW8vYXBpL3YxL2F1dGgvdG9rZW4iLCJpYXQiOjE1MTgwODcyMzAsImV4cCI6MTUxOTI5NjgzMCwibmJmIjoxNTE4MDg3MjMwLCJqdGkiOiJ2UEJnY09hVGdGOU9YaFh4Iiwic3ViIjozMzk1LCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.Y3wU_NBXXhw--b75x4iwo6fmHQQzMLkla2gHrheWqeU");
                 headers["Authorization"] =
                     "Bearer " + ApiUrls.loginToken //eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vNGRkYjMxNjkubmdyb2suaW8vYXBpL3YxL2F1dGgvdG9rZW4iLCJpYXQiOjE1MTgwODcyMzAsImV4cCI6MTUxOTI5NjgzMCwibmJmIjoxNTE4MDg3MjMwLCJqdGkiOiJ2UEJnY09hVGdGOU9YaFh4Iiwic3ViIjozMzk1LCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.Y3wU_NBXXhw--b75x4iwo6fmHQQzMLkla2gHrheWqeU");
                 return headers
             }
         }
         queue.add(jsonObjectRequest)
     }*/

    private fun createReceipt(
        orderId: Int,
        paymentTransactionModel: PaymentTransactionModel,
        itemViewHolder: MyViewHolder
    ) {
        val url = ApiUrls.createReceipt + "?order_id=" + orderId
        showCustomProgressAlertDialog(
            "",
            activity.resources.getString(R.string.please_wait)
        )

        commonViewModel.commonViewModelCall(url, JSONObject(), Request.Method.GET).observe(
            activity as LifecycleOwner
        ) { result ->
            try {
                val responseObj = JSONObject(result)
                if (responseObj.getInt("status_code") == 200) {
                    val response = responseObj.optJSONObject("response")
                    val rootObj = response!!.getJSONObject("response")
                    receiptUrl = rootObj.getString("public_url")
                    paymentTransactionModel.receiptURL = receiptUrl
                    val showReceipt = "View Receipt"
                    itemViewHolder.createReceipt.text = showReceipt
                    dialogObj.dismiss()
                } else {
                    dialogObj.dismiss()
                    errorHandler(activity, result)
                }
            } catch (e: Exception) {
                dialogObj.dismiss()
                e.printStackTrace()
            }
        }
    }

    private fun getReceiptUrl(url: String) {
        var url = url
        if (url.isNotEmpty()) {
            try {
                if (url.startsWith("http://", 0) || url.startsWith("https://", 0)) {
                    Log.i("url", url)
                } else {
                    url = "http://$url"
                }
                val browserIntent = Intent(Intent.ACTION_VIEW, Uri.parse(url))
                context.startActivity(browserIntent)
            } catch (e: Exception) {
                e.printStackTrace()
                Toast.makeText(context, "Invalid URL", Toast.LENGTH_SHORT).show()
            }
        } else {
            Toast.makeText(context, "Invalid URL", Toast.LENGTH_SHORT).show()
        }
    }

    inner class MyViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
        val orderDetails: TextView
        val tvPatientGeneralId: TextView
        val patientHistory: TextView
        val createReceipt: TextView
        val patientName: TextView
        val patient_status: TextView
        val patient_phoneNo: TextView
        val patientApplic_status: TextView
        val total_amt: TextView
        val apptDateTime: TextView
        val bulletPoint: TextView
        val tv_order_details: TextView
        val appointmentStatusL: LinearLayout
        val transactionCardLayout: RelativeLayout

        init {
            tvPatientGeneralId = itemView.findViewById(R.id.tv_patient_general_id)
            orderDetails = itemView.findViewById(R.id.order_details)
            patientHistory = itemView.findViewById(R.id.patient_history)
            createReceipt = itemView.findViewById(R.id.create_receipt)
            patientName = itemView.findViewById(R.id.patient_name)
            patient_status = itemView.findViewById(R.id.patient_payment_status)
            patient_phoneNo = itemView.findViewById(R.id.patient_ph_number)
            patientApplic_status = itemView.findViewById(R.id.patient_application_status)
            total_amt = itemView.findViewById(R.id.patient_amount)
            apptDateTime = itemView.findViewById(R.id.patient_appointment_time)
            bulletPoint = itemView.findViewById(R.id.bulletPoint)
            appointmentStatusL = itemView.findViewById(R.id.appointmentStatusL)
            tv_order_details = itemView.findViewById(R.id.tv_order_details)
            transactionCardLayout = itemView.findViewById(R.id.transactionCardLayout)
        }
    }

    fun getFileFromUrl(fileUrl: String?) {
        val url = JSONObject()
        try {
            url.put("url", fileUrl)
        } catch (e: Exception) {
            e.printStackTrace()
        }
        patientRecordsApi.postRecords(
            ApiUrls.getFileFromUrl,
            url,
            activity,
            object : VolleyCallback {
                override fun onSuccess(result: String) {
                    try {
                        val resObj = JSONObject(result)
                        val browserIntent =
                            Intent(
                                Intent.ACTION_VIEW,
                                Uri.parse(resObj.getString("response"))
                            )
                        context.startActivity(browserIntent)
                    } catch (e: Exception) {
                        e.printStackTrace()
                    }
                }

                override fun onError(err: String) {
                    errorHandler(context, err)
                }
            })
    }

    //    create invoice
    fun createInvoice(
        activity: Activity?,
        params: JSONObject?,
        paymentTransactionModel: PaymentTransactionModel,
        itemViewHolder: MyViewHolder
    ) {
        appointmentDetailsViewModel.creteInvoice(activity, params)
            .observe((activity as LifecycleOwner?)!!) { s ->
                try {
                    val response = JSONObject(s)
                    if (response.getInt("status_code") == 200) {
                        val responseObject = response.getJSONObject("response")
                        val invoiceResponseObject = responseObject.optJSONObject("invoice")
                        if (invoiceResponseObject != null) {
                            Toast.makeText(
                                activity,
                                "Invoice has been generated",
                                Toast.LENGTH_LONG
                            ).show()
                            paymentTransactionModel.invoiceUrl =
                                invoiceResponseObject.optString("public_url")
                            val content = SpannableString("View Invoice")
                            content.setSpan(UnderlineSpan(), 0, content.length, 0)
                            itemViewHolder.orderDetails.text = content
                        }
                    } else {
                        errorHandler(activity!!, s)
                    }
                } catch (e: JSONException) {
                    e.printStackTrace()
                }
            }
    }

    /* fun getServicesForAppointmentData(
         activity: Activity?,
         appointmentID: Int,
         orderId: Int,
         paymentTransactionModel: PaymentTransactionModel,
         itemViewHolder: MyViewHolder
     ) {
         appointmentDetailsViewModel.getServicesForAppointmentData(activity, appointmentID)
             .observe((activity as LifecycleOwner?)!!) { s ->
                 Log.i("capture notes res", s)
                 try {
                     val response = JSONObject(s)
                     if (response.getInt("status_code") == 200) {
                         val resObject =
                             response.getJSONObject("response").getJSONObject("response")
                         invoiceServiceArrayAppended = JSONArray()
                         changeArray = JSONArray()
                         originalServiceArrayData = JSONArray()
                         invoiceServiceArray = resObject.getJSONArray("invoice_services")
                         for (i in 0 until invoiceServiceArray!!.length()) {
                             val invoiceArrayObject = invoiceServiceArray!!.getJSONObject(i)
                             val eachValue = JSONObject()
                             eachValue.put("id", invoiceArrayObject.getInt("id"))
                             eachValue.put(
                                 "appointment_id",
                                 invoiceArrayObject.getInt("appointment_id")
                             )
                             eachValue.put("order_id", invoiceArrayObject.getInt("order_id"))
                             eachValue.put(
                                 "inclusion_type",
                                 invoiceArrayObject.getInt("inclusion_type")
                             )
                             eachValue.put(
                                 "appt_service_id",
                                 invoiceArrayObject.getInt("appt_service_id")
                             )
                             eachValue.put(
                                 "pre_tax_amount",
                                 invoiceArrayObject.getInt("pre_tax_amount")
                             )
                             eachValue.put("discount", invoiceArrayObject.getInt("discount"))
                             eachValue.put(
                                 "final_pre_tax_amount",
                                 invoiceArrayObject.getInt("final_pre_tax_amount")
                             )
                             eachValue.put("total", invoiceArrayObject.getInt("total"))
                             eachValue.put("tax_amt", invoiceArrayObject.getInt("tax_amt"))
                             eachValue.put(
                                 "created_at",
                                 invoiceArrayObject.getString("created_at")
                             )
                             eachValue.put(
                                 "updated_at",
                                 invoiceArrayObject.getString("updated_at")
                             )
                             eachValue.put(
                                 "service_details",
                                 invoiceArrayObject.getJSONObject("service_details")
                             )
                             eachValue.put("taxes", invoiceArrayObject.getJSONArray("taxes"))
                             eachValue.put("status", invoiceArrayObject.getBoolean("status"))
                             eachValue.put(
                                 "percentageApply",
                                 invoiceArrayObject.getInt("percentageApply")
                             )
                             eachValue.put(
                                 "applyDiscount1Flag",
                                 invoiceArrayObject.getInt("applyDiscount1Flag")
                             )
                             var totalPercent = 0
                             for (j in 0 until invoiceArrayObject.getJSONArray("taxes")
                                 .length()) {
                                 val percentObject =
                                     invoiceArrayObject.getJSONArray("taxes").getJSONObject(j)
                                 val taxPercentage = percentObject.getInt("percentage")
                                 totalPercent += taxPercentage
                             }
                             val totalPercentTax =
                                 java.lang.Float.valueOf(totalPercent.toFloat())
                             val taxesAmountAfterCalculateText =
                                 invoiceArrayObject.getInt("pre_tax_amount")
                                     .toFloat() / 100 * totalPercentTax
                             val finalPostTaxAmount =
                                 invoiceArrayObject.getInt("pre_tax_amount") + taxesAmountAfterCalculateText
                             eachValue.put(
                                 "final_post_tax_amount",
                                 finalPostTaxAmount.toDouble()
                             )
                             eachValue.put(
                                 "tax_amount",
                                 taxesAmountAfterCalculateText.toDouble()
                             )
                             invoiceServiceArrayAppended!!.put(eachValue)
                         }
                         val appointmentDataObject = resObject.getJSONObject("appt_data")
                         val appointmentOrderObject =
                             appointmentDataObject.getJSONObject("order")
                         appointmentOrderAmount = appointmentOrderObject.getInt("order_amt")
                         appointmentOrderAmountDiscount =
                             appointmentOrderObject.getInt("discount")
                         appointmentNetAmount = appointmentOrderObject.getInt("net_amount")
                         changeArray!!.put(appointmentOrderObject.getInt("order_amt"))
                         val invoiceServiceArray = resObject.getJSONArray("invoice_services")
                         val totalProcedureAmount = 0
                         if (invoiceServiceArray.length() > 0) {
                             for (i in 0 until invoiceServiceArray.length()) {
                                 val appointmentInvoiceServiceArrayObject =
                                     invoiceServiceArray.getJSONObject(i)
                                 changeArray!!.put(appointmentInvoiceServiceArrayObject.getInt("pre_tax_amount"))
                                 originalServiceArrayData!!.put(
                                     appointmentInvoiceServiceArrayObject.getInt("pre_tax_amount")
                                 )
                             }
                         } else {
                         }
                         Log.d("changeArrayData:", "changeArrayData:$changeArray")
                         getInvoiceDetailsData(
                             activity,
                             orderId,
                             changeArray,
                             paymentTransactionModel,
                             itemViewHolder
                         )
                     } else {
                         errorHandler(activity!!, s)
                     }
                 } catch (e: JSONException) {
                     e.printStackTrace()
                     Log.d("parserError:", "parserError:$e")
                 }
             }
     }*/

    /*   private fun getInvoiceDetailsData(
           activity: Activity?,
           orderID: Int,
           changeArray: JSONArray?,
           paymentTransactionModel: PaymentTransactionModel,
           itemViewHolder: MyViewHolder
       ) {
           appointmentDetailsViewModel.getInvoiceData(activity, orderID, changeArray)
               .observe((activity as LifecycleOwner?)!!) { s ->
                   Log.i("invoice details res", s)
                   try {
                       val response = JSONObject(s)
                       if (response.getInt("status_code") == 200) {
                           val resObject =
                               response.getJSONObject("response").getJSONObject("response")
                           invoicePreTaxAmount = resObject.getDouble("invoicePreTaxAmount")
                           invoicePreTaxDiscount = resObject.getDouble("invoicePreTaxDiscount")
                           invoicePreTaxTotal = resObject.getDouble("invoicePreTaxTotal")
                           invoiceTotalTax = resObject.getDouble("invoiceTotalTax")
                           invoiceNetAmount = resObject.getDouble("invoiceNetAmount")
                           invoicePostTaxDiscount = resObject.getDouble("invoicePostTaxDiscount")
                           invoiceGrandAmount = resObject.getDouble("invoiceGrandAmount")
                           invoiceGrandDiscount = resObject.getDouble("invoiceGrandDiscount")
                           invoiceGrandPreTax = resObject.getDouble("invoiceGrandPreTax")
                           invoiceGrandTax = resObject.getDouble("invoiceGrandTax")
                           invoiceGrandTotal = resObject.getDouble("invoiceGrandTotal")
                           invoiceServiceArrayData = resObject.getJSONArray("invoice_services")
                           val params = JSONObject()
                           try {
                               params.put("order_id", orderID)
                               params.put("pre_tax_amount", invoicePreTaxAmount)
                               params.put("pre_tax_discount", invoicePreTaxDiscount)
                               params.put("pre_tax_total", invoicePreTaxTotal)
                               params.put("total_tax", invoiceTotalTax)
                               params.put("invoice_total_amount", invoiceNetAmount)
                               params.put("post_tax_discount", invoicePostTaxDiscount)
                               params.put("isConsultaionForInvoice", true)
                               params.put("invoice_services", invoiceServiceArrayData)
                               params.put("invoice_grand_amount", invoiceGrandAmount)
                               params.put("invoice_grand_discount", invoiceGrandDiscount)
                               params.put("invoice_grand_pre_tax", invoiceGrandPreTax)
                               params.put("invoice_grand_tax", invoiceGrandTax)
                               params.put("invoice_grand_total", invoiceGrandTotal)
                               //                       params.put("platform", "app");
                               createInvoice(
                                   activity,
                                   params,
                                   paymentTransactionModel,
                                   itemViewHolder
                               )
                           } catch (e: JSONException) {
                               e.printStackTrace()
                           }
                       } else {
                           errorHandler(activity!!, s)
                       }
                   } catch (e: JSONException) {
                       e.printStackTrace()
                       Log.d("parserError:", "parserError:$e")
                   }
               }
       }*/

    @SuppressLint("SetTextI18n")
    fun cancelRefundPopup(order_id: Int, orderDetailsDate: String, refund_amt: Int) {
        val dialog = Dialog(context)
        dialog.setCancelable(false)
        dialog.setContentView(R.layout.dailog_cancel_refund_popup)
        val dailogArticleCancel =
            dialog.findViewById<View>(R.id.dailogArticleCancel) as ImageView
        val yesButton = dialog.findViewById<View>(R.id.yesButton) as RelativeLayout
        val noButton = dialog.findViewById<View>(R.id.noButton) as RelativeLayout
        val closeButton = dialog.findViewById<View>(R.id.closeButton) as RelativeLayout
        val refundTextOne = dialog.findViewById<View>(R.id.refundTextOne) as TextView
        val refundTextTwo = dialog.findViewById<View>(R.id.refundTextTwo) as TextView
        val refundTextThree = dialog.findViewById<View>(R.id.refundTextThree) as TextView
        refundTextThree.visibility = View.GONE
        closeButton.visibility = View.GONE


        try {
            val month_date = SimpleDateFormat("MMM yyyy", Locale.ENGLISH)
            val sdf = SimpleDateFormat("yyyy-MM-dd", Locale.ENGLISH)
            val splitDateTime =
                orderDetailsDate.split(" ".toRegex()).dropLastWhile { it.isEmpty() }
                    .toTypedArray()
            val dateString = splitDateTime[0]
            val dateSplitedString =
                dateString.split("-".toRegex()).dropLastWhile { it.isEmpty() }
                    .toTypedArray()
            val time = splitDateTime[1]
            val timeSplitedString =
                time.split(":".toRegex()).dropLastWhile { it.isEmpty() }.toTypedArray()
            val date = sdf.parse(dateString)
            val month_name = month_date.format(date!!)
            /* val finalTimeSpilted =
                 finalTime.split(" ".toRegex()).dropLastWhile { it.isEmpty() }.toTypedArray()*/
            finalDateTimeStringPopup =
                dateSplitedString[2] + month_name + " @" + timeSplitedString[0] + ":" + timeSplitedString[1]
        } catch (e: Exception) {
            e.printStackTrace()
        }
        refundTextTwo.text =
            "Refund is scheduled on$finalDateTimeStringPopup \n Refund Amount Rs. $refund_amt"
        yesButton.setOnClickListener {
            val url = ApiUrls.cancelRefund + "?order_id=" + order_id
            appointmentApiRequests.getApptApiData(
                url,
                "",
                activity,
                object : VolleyCallback {
                    override fun onSuccess(result: String) {
                        try {
                            val resObj = JSONObject(result)
                            if (resObj.getInt("response") == 1) {
                                refundTextOne.text = "Refund Cancelled Successfully"
                                refundTextTwo.text =
                                    "Refund amount will be reflected in your account"
                                refundTextThree.text =
                                    "Refund is scheduled on$finalDateTimeStringPopup \n Refund Amount Rs. $refund_amt"
                                yesButton.visibility = View.GONE
                                noButton.visibility = View.GONE
                                refundTextTwo.visibility = View.VISIBLE
                                refundTextThree.visibility = View.VISIBLE
                                closeButton.visibility = View.VISIBLE
                            }
                        } catch (e: Exception) {
                            e.printStackTrace()
                        }
                    }

                    override fun onError(err: String) {
                        errorHandler(context, err)
                    }
                })
        }
        noButton.setOnClickListener { dialog.dismiss() }
        closeButton.setOnClickListener { dialog.dismiss() }
        dailogArticleCancel.setOnClickListener { dialog.dismiss() }
        dialog.show()
    }

    fun trimMessage(json: String?, key: String?): String? {
        val trimmedString: String? = try {
            val obj = JSONObject(json!!)
            obj.getString(key!!)
        } catch (e: JSONException) {
            e.printStackTrace()
            return null
        }
        return trimmedString
    }
}