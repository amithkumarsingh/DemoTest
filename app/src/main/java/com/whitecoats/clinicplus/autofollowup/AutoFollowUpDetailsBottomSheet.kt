package com.whitecoats.clinicplus.autofollowup

import android.annotation.SuppressLint
import android.app.AlertDialog
import android.app.Dialog
import android.content.DialogInterface
import android.view.View
import android.widget.*
import androidx.coordinatorlayout.widget.CoordinatorLayout
import androidx.core.content.ContextCompat
import com.google.android.material.bottomsheet.BottomSheetBehavior
import com.google.android.material.bottomsheet.BottomSheetBehavior.BottomSheetCallback
import com.google.android.material.bottomsheet.BottomSheetDialogFragment
import com.whitecoats.clinicplus.AppUtilities
import com.whitecoats.clinicplus.PatientListClickListner
import com.whitecoats.clinicplus.R
import com.whitecoats.model.AutoFollowUpModel

class AutoFollowUpDetailsBottomSheet : BottomSheetDialogFragment() {
    private var activity: AutoFollowUpActivity? = null
    private var autoFollowUpModel: AutoFollowUpModel? = null
    private lateinit var apptDate: TextView
    private lateinit var submissionDate: TextView
    private lateinit var patientName: TextView
    private lateinit var patientNumber: TextView
    private lateinit var clinicName: TextView
    private lateinit var followUpDate: TextView
    private lateinit var conditionStatus: TextView
    private lateinit var instStatus: TextView
    private lateinit var reportView: TextView
    private lateinit var patientMsg: TextView
    private lateinit var apptNotesView: TextView
    private lateinit var typeIcon: ImageView
    private lateinit var infoIcon: ImageView
    private lateinit var closeDialog: ImageView
    private lateinit var bookAppt: Button
    private lateinit var detailLayout: LinearLayout
    lateinit var header: RelativeLayout
    private lateinit var followUpDateLabel: TextView
    private lateinit var tvPatientGeneralId: TextView
    private lateinit var apptDateLabel: TextView
    private lateinit var appUtilities: AppUtilities
    private var autoFollowUpListener: PatientListClickListner? = null

    //Bottom Sheet Callback
    private val mBottomSheetBehaviorCallback: BottomSheetCallback = object : BottomSheetCallback() {
        override fun onStateChanged(bottomSheet: View, newState: Int) {
            if (newState == BottomSheetBehavior.STATE_HIDDEN) {
                dismiss()
            }
        }

        override fun onSlide(bottomSheet: View, slideOffset: Float) {}
    }

    fun setupConfig(
        activity: AutoFollowUpActivity?,
        autoFollowUpModel: AutoFollowUpModel?,
        autoFollowUpListener: PatientListClickListner?
    ) {
        this.activity = activity
        this.autoFollowUpModel = autoFollowUpModel
        appUtilities = AppUtilities()
        this.autoFollowUpListener = autoFollowUpListener
    }

    @SuppressLint("RestrictedApi", "SetTextI18n")
    override fun setupDialog(dialog: Dialog, style: Int) {
        val contentView =
            View.inflate(context, R.layout.fragment_bottom_sheet_follow_up_details, null)
        dialog.setContentView(contentView)
        val params = (contentView.parent as View).layoutParams as CoordinatorLayout.LayoutParams
        val behavior = params.behavior
        //Set callback
        if (behavior != null && behavior is BottomSheetBehavior<*>) {
            behavior.setBottomSheetCallback(mBottomSheetBehaviorCallback)
        }
        tvPatientGeneralId = contentView.findViewById(R.id.tv_patient_general_id)
        apptDate = contentView.findViewById(R.id.followUpApptDate)
        submissionDate = contentView.findViewById(R.id.followUpSubDate)
        patientName = contentView.findViewById(R.id.followUpPatientName)
        patientNumber = contentView.findViewById(R.id.followUpPatientPhone)
        clinicName = contentView.findViewById(R.id.followUpClinicName)
        conditionStatus = contentView.findViewById(R.id.followUpConditionStatus)
        instStatus = contentView.findViewById(R.id.followUpInstStatus)
        reportView = contentView.findViewById(R.id.followUpViewReport)
        patientMsg = contentView.findViewById(R.id.followUpPatientMsg)
        apptNotesView = contentView.findViewById(R.id.followUpApptNotes)
        typeIcon = contentView.findViewById(R.id.followUpTypeIcon)
        infoIcon = contentView.findViewById(R.id.followUpClinicInfo)
        followUpDate = contentView.findViewById(R.id.followUpDate)
        bookAppt = contentView.findViewById(R.id.followUpBookAppt)
        detailLayout = contentView.findViewById(R.id.apptListDetailLayout)
        followUpDateLabel = contentView.findViewById(R.id.followUpDateLabel)
        closeDialog = contentView.findViewById(R.id.followUpCloseDetails)
        apptDateLabel = contentView.findViewById(R.id.followUpApptDateLabel)
        patientName.text = autoFollowUpModel!!.patientName
        /*New Registration(Autogenerated ID) changes for Gastro interface*/
        // if (sharedPref.getPref("is_show_general_id", "").equalsIgnoreCase("1")) {
        if (autoFollowUpModel!!.generalID != null && !autoFollowUpModel!!.generalID.equals(
                "",
                ignoreCase = true
            )
        ) {
            tvPatientGeneralId.visibility = View.VISIBLE
            tvPatientGeneralId.text = autoFollowUpModel!!.generalID
        } else {
            tvPatientGeneralId.visibility = View.GONE
        }
        /* } else {
            tvPatientGeneralId.setVisibility(View.GONE);
        }*/patientNumber.text = autoFollowUpModel!!.patientPhone
        submissionDate.text = autoFollowUpModel!!.submissionDate
        clinicName.text = autoFollowUpModel!!.clinicName

        //String apptDateformat = appUtilities.changeDateFormat("yyyy-MM-dd HH:mm:ss", "dd MMM, yy HH:mm", autoFollowUpModel.getSubmissionDate());
        submissionDate.text = getFormattedTime(autoFollowUpModel!!.submissionDate!!)
        val apptDateformat = appUtilities.changeDateFormat(
            "yyyy-MM-dd HH:mm:ss",
            "dd MMM, yy",
            autoFollowUpModel!!.appointmentDate
        )
        apptDate.text = apptDateformat
        if (autoFollowUpModel!!.mode == 1) {
            typeIcon.setImageDrawable(ContextCompat.getDrawable(requireActivity(),R.drawable.ic_video))
            infoIcon.visibility = View.GONE
        } else {
            typeIcon.setImageDrawable(ContextCompat.getDrawable(requireActivity(),R.drawable.ic_hospital))
            infoIcon.visibility = View.VISIBLE
        }
        if (autoFollowUpModel!!.isApptBooked == 1) {

            //String followUpDateformat = appUtilities.changeDateFormat("yyyy-MM-dd HH:mm:ss", timeFormat, autoFollowUpModel.getFollowUpDate());
            followUpDate.text = getFormattedTime(autoFollowUpModel!!.followUpDate!!)
            followUpDate.visibility = View.VISIBLE
            followUpDateLabel.visibility = View.VISIBLE
            bookAppt.visibility = View.GONE
        } else {
            followUpDate.visibility = View.GONE
            followUpDateLabel.visibility = View.GONE
            bookAppt.visibility = View.VISIBLE
        }
        when (autoFollowUpModel!!.conditionStatus) {
            2 -> {
                conditionStatus.text = "Better"
                conditionStatus.setTextColor(ContextCompat.getColor(requireContext(),R.color.colorSuccess))
            }
            1 -> {
                conditionStatus.text = "Same"
                conditionStatus.setTextColor(ContextCompat.getColor(requireContext(),R.color.colorInfo))
            }
            3 -> {
                conditionStatus.text = "Worse"
                conditionStatus.setTextColor(ContextCompat.getColor(requireContext(),R.color.colorDanger))
            }
            else -> {
                conditionStatus.text = "--"
                conditionStatus.setTextColor(ContextCompat.getColor(requireContext(),R.color.colorGreyText))
            }
        }
        when (autoFollowUpModel!!.followInstructionStatus) {
            1 -> {
                instStatus.text = "Completely"
                instStatus.setTextColor(ContextCompat.getColor(requireContext(),R.color.colorSuccess))
            }
            2 -> {
                instStatus.text = "Partially"
                instStatus.setTextColor(ContextCompat.getColor(requireContext(),R.color.colorInfo))
            }
            3 -> {
                instStatus.text = "No"
                instStatus.setTextColor(ContextCompat.getColor(requireContext(),R.color.colorDanger))
            }
            else -> {
                instStatus.text = "--"
                instStatus.setTextColor(ContextCompat.getColor(requireContext(),R.color.colorGreyText))
            }
        }
        if (autoFollowUpModel!!.fileUrl.equals("null", ignoreCase = true)) {
            reportView.text = "NA"
            reportView.setTextColor(ContextCompat.getColor(requireContext(),R.color.colorGrey2))
        } else {
            reportView.text = "View"
            reportView.setTextColor(ContextCompat.getColor(requireContext(),R.color.colorAccent))
        }
        if (autoFollowUpModel!!.patientMessage.equals("null", ignoreCase = true)) {
            patientMsg.text = "No message"
        } else {
            patientMsg.text = autoFollowUpModel!!.patientMessage
        }
        reportView.setOnClickListener { view ->
            if (reportView.text.toString().equals("View", ignoreCase = true)) {
                autoFollowUpListener!!.onItemClick(
                    view,
                    "FILE_URL",
                    autoFollowUpModel!!.fileUrl,
                    0,
                    0,
                    0,
                    0,
                    0,
                    "",
                    null,
                    null
                )
            }
        }
        patientNumber.setOnClickListener { view ->
            autoFollowUpListener!!.onItemClick(
                view,
                "PHONE",
                autoFollowUpModel!!.patientPhone,
                0,
                0,
                0,
                0,
                0,
                "",
                null,
                null
            )
        }
        infoIcon.setOnClickListener {
            val dialogClickListener = DialogInterface.OnClickListener { _, which ->
                when (which) {
                    DialogInterface.BUTTON_POSITIVE -> {}
                    DialogInterface.BUTTON_NEGATIVE -> {}
                }
            }
            val builder = AlertDialog.Builder(activity)
            builder.setMessage("Address: " + autoFollowUpModel!!.clinicAddress)
                .setPositiveButton("Cancel", dialogClickListener)
                .show()
        }
        bookAppt.setOnClickListener { view ->
            autoFollowUpListener!!.onItemClick(
                view,
                "BOOK_APPT",
                autoFollowUpModel!!.clinicName + "_" + autoFollowUpModel!!.followUpId,
                0,
                autoFollowUpModel!!.productServiceId,
                0,
                0,
                autoFollowUpModel!!.patientId,
                autoFollowUpModel!!.patientName,
                null,
                null
            )
        }
        closeDialog.setOnClickListener { dismiss() }
    }

    private fun getFormattedTime(timeNeedToFormat: String): String {
        val timeFormat: String = if (appUtilities.timeFormatPreferences(getActivity()) == 12) {
            "dd MMM, yy hh:mm aa"
        } else {
            "dd MMM, yy HH:mm"
        }
        return appUtilities.changeDateFormat("yyyy-MM-dd HH:mm:ss", timeFormat, timeNeedToFormat)
    }
}