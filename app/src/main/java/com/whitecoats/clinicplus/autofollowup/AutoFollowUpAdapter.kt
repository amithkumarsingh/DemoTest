package com.whitecoats.clinicplus.autofollowup

import android.annotation.SuppressLint
import android.app.Activity
import android.app.AlertDialog
import android.content.Context
import android.content.DialogInterface
import android.content.SharedPreferences
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.view.ViewTreeObserver.OnGlobalLayoutListener
import android.widget.*
import androidx.core.content.ContextCompat
import androidx.recyclerview.widget.RecyclerView
import co.mobiwise.materialintro.shape.Focus
import co.mobiwise.materialintro.shape.FocusGravity
import co.mobiwise.materialintro.shape.ShapeType
import co.mobiwise.materialintro.view.MaterialIntroView
import com.whitecoats.clinicplus.AppUtilities
import com.whitecoats.clinicplus.PatientListClickListner
import com.whitecoats.clinicplus.R
import com.whitecoats.clinicplus.apis.ApiUrls
import com.whitecoats.model.AutoFollowUpModel

class AutoFollowUpAdapter(
    private val activity: Activity, var context: Context,
    private val autoFollowUpModelList: List<AutoFollowUpModel>,
    groupData: ArrayList<Int>,
    autoFollowUpListener: PatientListClickListner
) : RecyclerView.Adapter<RecyclerView.ViewHolder>() {
    private val autoFollowUpListener: PatientListClickListner
    private val groupData: ArrayList<Int>
    private val appUtilities: AppUtilities
    private val appPreference: SharedPreferences
//    private var context: Context

    init {
//        context = context
        this.autoFollowUpListener = autoFollowUpListener
        this.groupData = groupData
        appUtilities = AppUtilities()
        appPreference = activity.getSharedPreferences(ApiUrls.appSharedPref, Context.MODE_PRIVATE)
    }

    override fun onCreateViewHolder(viewGroup: ViewGroup, i: Int): RecyclerView.ViewHolder {
//        View itemView = LayoutInflater.from(viewGroup.getContext())
//                .inflate(R.layout.list_row_follow_up, viewGroup, false);
        if (i == TYPE_ITEM) {
            val view = LayoutInflater.from(viewGroup.context)
                .inflate(R.layout.list_row_follow_up, viewGroup, false)
            context = viewGroup.context
            return MyViewHolder(view)
        } else if (i == TYPE_HEADER) {
            val view = LayoutInflater.from(viewGroup.context)
                .inflate(R.layout.list_row_follow_up, viewGroup, false)
            context = viewGroup.context
            return MyViewHolder(view)
        } else if (i == TYPE_FOOTER) {
            val view = LayoutInflater.from(viewGroup.context).inflate(
                R.layout.activity_path_orderview_footer,
                viewGroup, false
            )
            return FooterViewHolder(view)
        }
        throw RuntimeException("there is no type that matches the type $i + make sure your using types correctly")


//        return new MyViewHolder(itemView);
    }

    @SuppressLint("RecyclerView", "SetTextI18n")
    override fun onBindViewHolder(myViewHolder: RecyclerView.ViewHolder, i: Int) {
        myViewHolder.itemView.tag = autoFollowUpModelList[i]
        if (myViewHolder is MyViewHolder) {
            val itemViewHolder = myViewHolder
            val autoFollowUpModel = autoFollowUpModelList[i]
            if (groupData[i] == 0) {
                itemViewHolder.dateGroup.visibility = View.VISIBLE
                val date = appUtilities.changeDateFormat(
                    "yyyy-MM-dd",
                    "dd MMM, yy",
                    autoFollowUpModel.appointmentDate
                )
                itemViewHolder.submissionDate.text = date
            } else {
                itemViewHolder.dateGroup.visibility = View.GONE
                val date = appUtilities.changeDateFormat(
                    "yyyy-MM-dd",
                    "dd MMM, yy",
                    autoFollowUpModel.appointmentDate
                )
                itemViewHolder.submissionDate.text = date
            }
            itemViewHolder.patientName.text = autoFollowUpModel.patientName
            itemViewHolder.patientNumber.text = autoFollowUpModel.patientPhone
            itemViewHolder.patientMsg.text = autoFollowUpModel.patientMessage

            /*New Registration(Autogenerated ID) changes for Gastro interface*/
            // if (sharedPref.getPref("is_show_general_id", "").equalsIgnoreCase("1")) {
            if (autoFollowUpModel.generalID != null && !autoFollowUpModel.generalID.equals(
                    "",
                    ignoreCase = true
                )
            ) {
                itemViewHolder.tvPatientGeneralId.visibility = View.VISIBLE
                itemViewHolder.tvPatientGeneralId.text = autoFollowUpModel.generalID
            } else {
                itemViewHolder.tvPatientGeneralId.visibility = View.GONE
            }
            /*} else {
                itemViewHolder.tvPatientGeneralId.setVisibility(View.GONE);
            }*/


            val apptDateformat = appUtilities.changeDateFormat(
                "yyyy-MM-dd HH:mm:ss",
                "dd MMM, yy",
                autoFollowUpModel.submissionDate
            )
            itemViewHolder.apptDate.text = apptDateformat
            itemViewHolder.clinicName.text = autoFollowUpModel.clinicName
            if (autoFollowUpModel.mode == 1) {
                itemViewHolder.typeIcon.setImageDrawable(
                    ContextCompat.getDrawable(
                        activity,
                        R.drawable.ic_video
                    )
                )
                itemViewHolder.infoIcon.visibility = View.GONE
            } else {
                itemViewHolder.typeIcon.setImageDrawable(
                    ContextCompat.getDrawable(
                        activity,
                        R.drawable.ic_hospital
                    )
                )
                itemViewHolder.infoIcon.visibility = View.VISIBLE
            }

            if (autoFollowUpModel.isApptBooked == 1) {
                val followUpDateformat = appUtilities.changeDateFormat(
                    "yyyy-MM-dd HH:mm:ss",
                    "dd MMM, yy HH:mm",
                    autoFollowUpModel.followUpDate
                )
                itemViewHolder.followUpDate.text = followUpDateformat
                itemViewHolder.followUpDate.visibility = View.VISIBLE
                itemViewHolder.followUpDateLabel.visibility = View.VISIBLE
                itemViewHolder.bookAppt.visibility = View.GONE
            } else {
                itemViewHolder.followUpDate.visibility = View.GONE
                itemViewHolder.followUpDateLabel.visibility = View.GONE
                itemViewHolder.bookAppt.visibility = View.VISIBLE
            }
            when (autoFollowUpModel.conditionStatus) {
                1 -> {
                    itemViewHolder.conditionStatus.text = "Better"
                    itemViewHolder.conditionStatus.setTextColor(ContextCompat.getColor(activity,R.color.colorSuccess))
                }
                2 -> {
                    itemViewHolder.conditionStatus.text = "Same"
                    itemViewHolder.conditionStatus.setTextColor(ContextCompat.getColor(activity,R.color.colorInfo))
                }
                3 -> {
                    itemViewHolder.conditionStatus.text = "Worse"
                    itemViewHolder.conditionStatus.setTextColor(ContextCompat.getColor(activity,R.color.colorDanger))
                }
            }
            when (autoFollowUpModel.followInstructionStatus) {
                1 -> {
                    itemViewHolder.instStatus.text = "Completely"
                    itemViewHolder.instStatus.setTextColor(ContextCompat.getColor(activity,R.color.colorSuccess))
                }
                2 -> {
                    itemViewHolder.instStatus.text = "Partially"
                    itemViewHolder.instStatus.setTextColor(ContextCompat.getColor(activity,R.color.colorInfo))
                }
                3 -> {
                    itemViewHolder.instStatus.text = "No"
                    itemViewHolder.instStatus.setTextColor(ContextCompat.getColor(activity,R.color.colorDanger))
                }
            }

            if (autoFollowUpModel.fileUrl.equals("null", ignoreCase = true)) {
                itemViewHolder.reportView.text = "NA"
                itemViewHolder.reportView.setTextColor(ContextCompat.getColor(activity,R.color.colorGrey2))
            } else {
                itemViewHolder.reportView.text = "View"
                itemViewHolder.reportView.setTextColor(ContextCompat.getColor(activity,R.color.colorAccent))


            }
            itemViewHolder.reportView.setOnClickListener { view ->
                if (itemViewHolder.reportView.text.toString().equals("View", ignoreCase = true)) {
                    autoFollowUpListener.onItemClick(
                        view,
                        "FILE_URL",
                        autoFollowUpModel.fileUrl,
                        0,
                        0,
                        0,
                        0,
                        0,
                        "",
                        null,
                        null
                    )
                }
            }
            itemViewHolder.patientNumber.setOnClickListener { view ->
                autoFollowUpListener.onItemClick(
                    view,
                    "PHONE",
                    autoFollowUpModel.patientPhone,
                    0,
                    0,
                    0,
                    0,
                    0,
                    "",
                    null,
                    null
                )

                //  }
            }
            if (autoFollowUpModel.patientMessage.equals("null", ignoreCase = true)) {
                itemViewHolder.patientMsg.text = "No message"
            } else {
                itemViewHolder.patientMsg.text = autoFollowUpModel.patientMessage
            }
            itemViewHolder.headerLayout.setOnClickListener { view ->
                autoFollowUpListener.onItemClick(
                    view,
                    "DETAILS",
                    autoFollowUpModel.patientPhone,
                    i,
                    0,
                    0,
                    0,
                    0,
                    "",
                    null,
                    null
                )
            }
            itemViewHolder.infoIcon.setOnClickListener {
                val dialogClickListener = DialogInterface.OnClickListener { dialog, which ->
                    when (which) {
                        DialogInterface.BUTTON_POSITIVE -> {}
                        DialogInterface.BUTTON_NEGATIVE -> {}
                    }
                }
                val builder = AlertDialog.Builder(
                    activity
                )
                builder.setMessage("Address: " + autoFollowUpModel.clinicAddress)
                    .setPositiveButton("Cancel", dialogClickListener)
                    .show()
            }
            itemViewHolder.bookAppt.setOnClickListener { view ->

                autoFollowUpListener.onItemClick(
                    view,
                    "BOOK_APPT",
                    autoFollowUpModel.clinicName + "_" + autoFollowUpModel.followUpId,
                    0,
                    autoFollowUpModel.productServiceId,
                    0,
                    0,
                    autoFollowUpModel.patientId,
                    autoFollowUpModel.patientName,
                    null,
                    null
                )

            }
            itemViewHolder.headerLayout.viewTreeObserver.addOnGlobalLayoutListener(object :
                OnGlobalLayoutListener {
                override fun onGlobalLayout() {
                    itemViewHolder.headerLayout.viewTreeObserver.removeOnGlobalLayoutListener(this)
                    showGuide(1, i, itemViewHolder)
                }
            })
        } else if (myViewHolder is FooterViewHolder) {
            footerHolder = myViewHolder
            if (AutoFollowUpActivity.isMoreData && autoFollowUpModelList.size >= 10) {
                myViewHolder.footerText.visibility = View.VISIBLE
            } else {
                myViewHolder.footerText.visibility = View.GONE
            }
            footerHolder!!.footerText.setOnClickListener { view ->
                autoFollowUpListener.onItemClick(
                    view,
                    "LOADMORE",
                    "",
                    0,
                    0,
                    0,
                    0,
                    0,
                    "",
                    null,
                    null
                )

                //   Toast.makeText(context, "You clicked at Load More", Toast.LENGTH_SHORT).show();
            }
        }
    }

    override fun getItemCount(): Int {
        return autoFollowUpModelList.size
    }

    override fun getItemViewType(position: Int): Int {
        if (isPositionHeader(position)) {
            return TYPE_HEADER
        } else if (isPositionFooter(position)) {
            return TYPE_FOOTER
        }
        return TYPE_ITEM
    }

    private fun isPositionHeader(position: Int): Boolean {
        return position == 0
    }

    private fun isPositionFooter(position: Int): Boolean {
        return position >= autoFollowUpModelList.size - 1 && autoFollowUpModelList.size >= 10
    }

    inner class MyViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
        val apptDate: TextView
        val submissionDate: TextView
        val patientName: TextView
        val patientNumber: TextView
        val clinicName: TextView
        val followUpDate: TextView
        val conditionStatus: TextView
        val instStatus: TextView
        val reportView: TextView
        val patientMsg: TextView
        private val apptNotesView: TextView
        val typeIcon: ImageView
        val infoIcon: ImageView
        val arrowIcon: ImageView
        val bookAppt: Button
        val headerLayout: RelativeLayout
        private val detailLayout: LinearLayout
        var header: RelativeLayout? = null
        var dateGroup: RelativeLayout
        val followUpDateLabel: TextView
        val tvPatientGeneralId: TextView


        init {

            tvPatientGeneralId = itemView.findViewById(R.id.tv_patient_general_id)


            apptDate = itemView.findViewById(R.id.followUpApptDate)
            submissionDate = itemView.findViewById(R.id.followUpSubDate)
            patientName = itemView.findViewById(R.id.followUpPatientName)
            patientNumber = itemView.findViewById(R.id.followUpPatientPhone)
            clinicName = itemView.findViewById(R.id.followUpClinicName)
            conditionStatus = itemView.findViewById(R.id.followUpConditionStatus)
            instStatus = itemView.findViewById(R.id.followUpInstStatus)
            reportView = itemView.findViewById(R.id.followUpViewReport)
            patientMsg = itemView.findViewById(R.id.followUpPatientMsg)
            apptNotesView = itemView.findViewById(R.id.followUpApptNotes)
            typeIcon = itemView.findViewById(R.id.followUpTypeIcon)
            infoIcon = itemView.findViewById(R.id.followUpClinicInfo)
            followUpDate = itemView.findViewById(R.id.followUpDate)
            bookAppt = itemView.findViewById(R.id.followUpBookAppt)
            headerLayout = itemView.findViewById(R.id.followUpHeaderLayout)
            detailLayout = itemView.findViewById(R.id.apptListDetailLayout)
            dateGroup = itemView.findViewById(R.id.followUpDateGroupLayout)
            followUpDateLabel = itemView.findViewById(R.id.followUpDateLabel)
            arrowIcon = itemView.findViewById(R.id.followUpArrowIcon)
        }
    }

    inner class FooterViewHolder(view: View) : RecyclerView.ViewHolder(view) {
        var footerText: TextView
        var bottomSpace: View

        init {
            footerText = view.findViewById(R.id.footer_text)
            bottomSpace = view.findViewById(R.id.bottomSpace)
        }
    }

    inner class HeaderViewHolder(var headerView: View) : RecyclerView.ViewHolder(
        headerView
    )

    private fun showGuide(section: Int, position: Int, myViewHolder: MyViewHolder) {
        if (position == 0) {
            when (section) {
                1 -> if (!appPreference.getBoolean("AutoFollowup", false)) {

                    MaterialIntroView.Builder(activity)
                        .enableDotAnimation(true)
                        .enableIcon(false)
                        .dismissOnTouch(true)
                        .setFocusGravity(FocusGravity.CENTER)
                        .setFocusType(Focus.NORMAL)
                        .setDelayMillis(50)
                        .enableFadeAnimation(true)
                        .setInfoText("Date on which the appointment happened") //.setInfoText("Use our assistant to get instant help like fetching patients data, cancel appointments with one command etc")
                        .setShape(ShapeType.CIRCLE)
                        .setTarget(myViewHolder.apptDate)
                        .setUsageId("intro_apptDate") //THIS SHOULD BE UNIQUE ID
                        .setListener {
                            showGuide(2, position, myViewHolder)
                            val editor = appPreference.edit()
                            editor.putBoolean("AutoFollowup", true)
                            editor.apply()
                        }
                        .show()
                }
                2 ->
                    MaterialIntroView.Builder(activity)
                        .enableDotAnimation(true)
                        .enableIcon(false)
                        .dismissOnTouch(true)
                        .setFocusGravity(FocusGravity.CENTER)
                        .setFocusType(Focus.NORMAL)
                        .setDelayMillis(50)
                        .enableFadeAnimation(true)
                        .setInfoText("Tap on the card to get more information of the follow-up") //.setInfoText("Use our assistant to get instant help like fetching patients data, cancel appointments with one command etc")
                        .setShape(ShapeType.CIRCLE)
                        .setTarget(myViewHolder.arrowIcon)
                        .setUsageId("intro_arrowIconThree") //THIS SHOULD BE UNIQUE ID
                        .setListener {
                            val autoFollowUpActivity = activity as AutoFollowUpActivity
                            autoFollowUpActivity.showGuide(1)
                        }
                        .show()
            }
        }
    }

    companion object {
        private const val TYPE_HEADER = 0
        private const val TYPE_ITEM = 1
        private const val TYPE_FOOTER = 2

        @SuppressLint("StaticFieldLeak")
        var footerHolder: FooterViewHolder? = null
    }
}