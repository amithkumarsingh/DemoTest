package com.whitecoats.adapter

import android.app.Activity
import android.content.Intent
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.*
import androidx.recyclerview.widget.RecyclerView
import com.whitecoats.clinicplus.*
import com.whitecoats.clinicplus.activities.EMRActivity
import com.whitecoats.clinicplus.apis.ApiUrls
import com.whitecoats.clinicplus.utils.SharedPref
import com.whitecoats.model.AppointmentSlotListModel
import com.whitecoats.model.PatientPListModel
import com.zoho.salesiqembed.ZohoSalesIQ

class BookApptListAdapter(
    private val bookApptModelList: List<PatientPListModel>,
    private val doctorServiceArrayList: List<AppointmentSlotListModel>?,
    private val activity: Activity,
    private val patientListner: PatientListClickListner
) : RecyclerView.Adapter<RecyclerView.ViewHolder>() {
    private val TYPE_HEADER = 0
    private val TYPE_ITEM = 1
    private val TYPE_FOOTER = 2
    var footerHolder: FooterViewHolder? = null
    private val sharedPref: SharedPref = SharedPref(activity)

    override fun onCreateViewHolder(viewGroup: ViewGroup, i: Int): RecyclerView.ViewHolder {
        when (i) {
            TYPE_ITEM -> {
                val view = LayoutInflater.from(viewGroup.context)
                    .inflate(R.layout.list_row_bookappt_plist, viewGroup, false)
                return MyViewHolder(view)
            }
            TYPE_HEADER -> {
                val view = LayoutInflater.from(viewGroup.context)
                    .inflate(R.layout.list_row_bookappt_plist, viewGroup, false)
                return MyViewHolder(view)
            }
            TYPE_FOOTER -> {
                val view = LayoutInflater.from(viewGroup.context).inflate(
                    R.layout.activity_path_orderview_footer,
                    viewGroup, false
                )
                return FooterViewHolder(view)
            }
            else -> throw RuntimeException("there is no type that matches the type $i + make sure your using types correctly")
        }
    }

    override fun onBindViewHolder(myViewHolder: RecyclerView.ViewHolder, i: Int) {
        myViewHolder.itemView.tag = bookApptModelList[i]
        if (myViewHolder is MyViewHolder) {
            val bookApptModel = bookApptModelList[i]


            /*New Registration(Autogenerated ID) changes for Gastro interface*/
            //  if (sharedPref.getPref("is_show_general_id", "").equalsIgnoreCase("1")) {
            if (bookApptModel.getGeneralID() != null && !bookApptModel.getGeneralID()
                    .equals("", ignoreCase = true)
            ) {
                myViewHolder.tvPatientGeneralId.visibility = View.VISIBLE
                myViewHolder.tvPatientGeneralId.text = bookApptModel.getGeneralID()
            } else {
                myViewHolder.tvPatientGeneralId.visibility = View.GONE
            }
            /* } else {
                itemViewHolder.tvPatientGeneralId.setVisibility(View.GONE);
            }*/

            myViewHolder.patientName.text = bookApptModel.getPatientName()
            myViewHolder.phoneNo.text = bookApptModel.getPhNo()
            if (bookApptModel.roleId == 5) {
                myViewHolder.type.text = activity.getString(R.string.Internal)
            } else if (bookApptModel.roleId == 4 || bookApptModel.roleId == 6) {
                myViewHolder.type.text = activity.getString(R.string.Registered)
            }
            myViewHolder.details.visibility = View.GONE
            myViewHolder.bookApptRow.setOnClickListener {
                if (sharedPref.isPrefExists("EMR")) {
                    myViewHolder.llParentNotes.visibility = View.VISIBLE
                    myViewHolder.viewNotes.visibility = View.VISIBLE
                } else {
                    myViewHolder.llParentNotes.visibility = View.GONE
                    myViewHolder.viewNotes.visibility = View.GONE
                }
                if (myViewHolder.details.visibility == View.VISIBLE) {
                    myViewHolder.details.visibility = View.GONE
                    myViewHolder.bookApptListArrowIcon.setImageResource(R.drawable.ic_arrow_right)
                } else {
                    ZohoSalesIQ.Tracking.setCustomAction("BookAppt - Service View Open")
                    myViewHolder.details.visibility = View.VISIBLE
                    myViewHolder.bookApptListArrowIcon.setImageResource(R.drawable.ic_arrow_down)
                    if (doctorServiceArrayList!!.isNotEmpty()) {
                        myViewHolder.setupService.visibility = View.GONE
                        myViewHolder.noServiceEmptyText.visibility = View.GONE
                        for (i1 in doctorServiceArrayList.indices) {
                            if (doctorServiceArrayList[i1].appointmentServiceID == 1 && doctorServiceArrayList[i1].appointmentServiceName.equals(
                                    "Video",
                                    ignoreCase = true
                                )
                            ) {
                                myViewHolder.searchPageBookVideo.visibility = View.VISIBLE
                            }
                            if (doctorServiceArrayList[i1].appointmentServiceID == 1 && doctorServiceArrayList[i1].appointmentServiceName.equals(
                                    "Instant Video",
                                    ignoreCase = true
                                )
                            ) {
                                myViewHolder.searchPageBookInstantV.visibility = View.VISIBLE
                            }
                            if (doctorServiceArrayList[i1].appointmentServiceID == 2) {
                                if (bookApptModel.roleId == 5) {
                                    myViewHolder.searchPageBookChat.visibility = View.GONE
                                } else {
                                    myViewHolder.searchPageBookChat.visibility = View.VISIBLE
                                }
                            }
                            if (doctorServiceArrayList[i1].appointmentServiceID == 3) {
                                myViewHolder.searchPageBookClinic.visibility = View.VISIBLE
                            }
                            if (doctorServiceArrayList[i1].instantVideoJsonObject != null) {
                                myViewHolder.searchPageBookInstantV.visibility = View.VISIBLE
                            }
                        }
                    } else {
                        myViewHolder.setupService.visibility = View.VISIBLE
                        myViewHolder.noServiceEmptyText.visibility = View.VISIBLE
                        val res = "You have not created any service yet"
                        myViewHolder.noServiceEmptyText.text = res
                    }
                    if (myViewHolder.searchPageBookVideo.visibility == View.VISIBLE
                        || myViewHolder.searchPageBookClinic.visibility == View.VISIBLE
                    ) {
                        myViewHolder.llRow1.visibility = View.VISIBLE
                    } else {
                        myViewHolder.llRow1.visibility = View.GONE
                    }
                    if (myViewHolder.searchPageBookInstantV.visibility == View.VISIBLE
                        || myViewHolder.searchPageBookChat.visibility == View.VISIBLE
                    ) {
                        myViewHolder.llRow2.visibility = View.VISIBLE
                    } else {
                        myViewHolder.llRow2.visibility = View.GONE
                    }
                }
            }
            myViewHolder.patientListCallIcon.setOnClickListener { v: View? ->
                patientListner.onItemClick(
                    v,
                    "",
                    bookApptModel.getPhNo(),
                    0,
                    0,
                    0,
                    0,
                    bookApptModel.patientId,
                    bookApptModel.getPatientName(),
                    null,
                    null
                )
            }
            myViewHolder.phoneNo.setOnClickListener { v: View? ->
                ZohoSalesIQ.Tracking.setCustomAction("BookAppt - Calling Patient")
                patientListner.onItemClick(
                    v,
                    "",
                    bookApptModel.getPhNo(),
                    0,
                    0,
                    0,
                    0,
                    bookApptModel.patientId,
                    bookApptModel.getPatientName(),
                    null,
                    null
                )
            }
            myViewHolder.searchPageBookVideo.setOnClickListener { v: View? ->
                ZohoSalesIQ.Tracking.setCustomAction("BookAppt - Video Service")
                patientListner.onItemClick(
                    v,
                    "",
                    "",
                    1,
                    0,
                    0,
                    0,
                    bookApptModel.patientId,
                    bookApptModel.getPatientName(),
                    null,
                    null
                )
            }
            myViewHolder.searchPageBookClinic.setOnClickListener { v: View? ->
                ZohoSalesIQ.Tracking.setCustomAction("BookAppt - Clinic Service")
                patientListner.onItemClick(
                    v,
                    "",
                    "",
                    0,
                    3,
                    0,
                    0,
                    bookApptModel.patientId,
                    bookApptModel.getPatientName(),
                    null,
                    null
                )
                MyClinicGlobalClass.logUserActionEvent(
                    ApiUrls.doctorId,
                    activity.getString(R.string.AppointmentsListSelectClinic),
                    null
                )
            }
            myViewHolder.searchPageBookInstantV.setOnClickListener { v: View? ->
                if (doctorServiceArrayList != null && doctorServiceArrayList.isNotEmpty()) {
                    ZohoSalesIQ.Tracking.setCustomAction("BookAppt - Instant Video Service")
                    val instantVideo =
                        doctorServiceArrayList[doctorServiceArrayList.size - 2].instantVideoJsonObject
                    val instantVideoInfo =
                        doctorServiceArrayList[doctorServiceArrayList.size - 1].instantVideoInfoJsonObject
                    patientListner.onItemClick(
                        v,
                        "",
                        "",
                        0,
                        0,
                        0,
                        0,
                        bookApptModel.patientId,
                        bookApptModel.getPatientName(),
                        instantVideo,
                        instantVideoInfo
                    )
                }
            }
            myViewHolder.searchPageBookChat.setOnClickListener { v: View? ->
                patientListner.onItemClick(
                    v,
                    "",
                    "",
                    0,
                    0,
                    0,
                    2,
                    bookApptModel.patientId,
                    bookApptModel.getPatientName(),
                    null,
                    null
                )
                ZohoSalesIQ.Tracking.setCustomAction("BookAppt - Chat Service")
            }
            myViewHolder.createNotes.setOnClickListener {
                ZohoSalesIQ.Tracking.setCustomAction("BookAppt - Create Note")
                val intent = Intent(activity, EMRActivity::class.java)
                intent.putExtra("ApptId", 0)
                intent.putExtra("PatientId", bookApptModel.patientId)
                intent.putExtra("ApptMode", 0)
                intent.putExtra("ApptDate", "")
                intent.putExtra("ApptTime", "00:00:00")
                intent.putExtra("PatientName", bookApptModel.getPatientName())
                activity.startActivity(intent)
            }
            myViewHolder.setupService.setOnClickListener {
                val intent = Intent(activity, SettingsFormActivity::class.java)
                intent.putExtra("FormType", 7)
                intent.putExtra("Title", activity.resources.getString(R.string.service_setup))
                activity.startActivity(intent)
            }
        } else if (myViewHolder is FooterViewHolder) {
            footerHolder = myViewHolder
            if (BookAppointmentActivity.isMoreData && bookApptModelList.size >= 50) {
                myViewHolder.footerText.visibility = View.VISIBLE
            } else {
                myViewHolder.footerText.visibility = View.GONE
            }
            footerHolder!!.footerText.setOnClickListener { view: View? ->
                patientListner.onItemClick(
                    view,
                    "LOADMORE",
                    "",
                    0,
                    0,
                    0,
                    0,
                    0,
                    "",
                    null,
                    null
                )
            }
        }
    }

    override fun getItemCount(): Int {
        return bookApptModelList.size
    }

    override fun getItemViewType(position: Int): Int {
        if (isPositionHeader(position)) {
            return TYPE_HEADER
        } else if (isPositionFooter(position)) {
            return TYPE_FOOTER
        }
        return TYPE_ITEM
    }

    private fun isPositionHeader(position: Int): Boolean {
        return position == 0
    }

    private fun isPositionFooter(position: Int): Boolean {
        // && data.size() >= 10 && appointmentsActivity.isMoreData
        return position >= bookApptModelList.size - 1 && bookApptModelList.size >= 10
    }

    class MyViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
        var tvPatientGeneralId: TextView

        var patientName: TextView
        var phoneNo: TextView
        var type: TextView
        var noServiceEmptyText: TextView
        var bookApptRow: RelativeLayout
        var details: LinearLayout
        var more: LinearLayout?=null
        var patientListCallIcon: ImageView
        var bookApptListArrowIcon: ImageView
        var searchPageBookVideo: LinearLayout
        var searchPageBookClinic: LinearLayout
        var searchPageBookInstantV: LinearLayout
        var searchPageBookChat: LinearLayout
        var createNotes: LinearLayout
        var setupService: Button
        private var bookServiceLayout: LinearLayout
        var llParentNotes: LinearLayout
        var viewNotes: View
        var llRow1: LinearLayout
        var llRow2: LinearLayout

        init {

            tvPatientGeneralId = itemView.findViewById(R.id.tv_patient_general_id)


            patientName = itemView.findViewById(R.id.bookApptListPatientName)
            phoneNo = itemView.findViewById(R.id.bookApptListPhoneNo)
            type = itemView.findViewById(R.id.bookApptListType)
            bookApptRow = itemView.findViewById(R.id.bookApptListRow)
            details = itemView.findViewById(R.id.patientListDetailLayout)
            more = itemView.findViewById(R.id.patientListMoreLayout)
            patientListCallIcon = itemView.findViewById(R.id.bookApptListCallIcon)
            bookApptListArrowIcon = itemView.findViewById(R.id.bookApptListArrowIcon)
            searchPageBookVideo = itemView.findViewById(R.id.searchPageBookVideo)
            searchPageBookClinic = itemView.findViewById(R.id.searchPageBookClinic)
            searchPageBookInstantV = itemView.findViewById(R.id.searchPageBookInstantV)
            searchPageBookChat = itemView.findViewById(R.id.searchPageBookChat)
            createNotes = itemView.findViewById(R.id.createNotes)
            setupService = itemView.findViewById(R.id.searchPageSetupService)
            noServiceEmptyText = itemView.findViewById(R.id.searchPageBookEmptyText)
            bookServiceLayout = itemView.findViewById(R.id.patientListBookServiceLayout)
            llParentNotes = itemView.findViewById(R.id.ll_parent_notes)
            viewNotes = itemView.findViewById(R.id.view_notes)
            llRow1 = itemView.findViewById(R.id.ll_row1)
            llRow2 = itemView.findViewById(R.id.ll_row2)
        }
    }

    class FooterViewHolder(view: View) : RecyclerView.ViewHolder(view) {
        var footerText: TextView
        var bottomSpace: View

        init {
            footerText = view.findViewById(R.id.footer_text)
            bottomSpace = view.findViewById(R.id.bottomSpace)
        }
    }

    class HeaderViewHolder(var headerView: View) : RecyclerView.ViewHolder(
        headerView
    )
}